
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 17 21:40:27 GMT-05:00 2025
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 17 21:40:27 GMT-05:00 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\014\004\000\002\013\003\000\002\013\003" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\101\002\000\002\007\013\000\002" +
    "\003\002\000\002\003\003\000\002\011\003\000\002\011" +
    "\004\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\004\002\000\002\004\004\000\002" +
    "\005\002\000\002\005\004\000\002\006\003\000\002\006" +
    "\005\000\002\010\002\000\002\010\003\000\002\017\003" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\006\000\002\021\010\000\002" +
    "\102\002\000\002\022\012\000\002\103\002\000\002\022" +
    "\012\000\002\025\002\000\002\025\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\004\000\002\027\007\000" +
    "\002\023\010\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\055\004" +
    "\000\002\055\005\000\002\030\003\000\002\030\004\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\070\010" +
    "\000\002\070\006\000\002\070\006\000\002\031\005\000" +
    "\002\032\003\000\002\032\004\000\002\033\006\000\002" +
    "\050\005\000\002\050\007\000\002\050\006\000\002\050" +
    "\010\000\002\075\003\000\002\075\003\000\002\074\005" +
    "\000\002\074\005\000\002\074\005\000\002\074\005\000" +
    "\002\074\005\000\002\074\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\077\005\000\002\077\005\000\002\077\004" +
    "\000\002\077\004\000\002\077\003\000\002\077\003\000" +
    "\002\077\005\000\002\077\003\000\002\100\005\000\002" +
    "\100\005\000\002\100\005\000\002\100\005\000\002\100" +
    "\005\000\002\100\005\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\053\006\000\002\053\006\000\002\053" +
    "\006\000\002\053\006\000\002\053\006\000\002\053\005" +
    "\000\002\053\005\000\002\053\006\000\002\042\010\000" +
    "\002\071\003\000\002\043\002\000\002\043\004\000\002" +
    "\045\007\000\002\046\013\000\002\046\012\000\002\061" +
    "\002\000\002\061\004\000\002\061\006\000\002\061\005" +
    "\000\002\062\002\000\002\062\003\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\062\004\000\002" +
    "\047\004\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\024\031\ufff5\034\023\035\014\043\007\044" +
    "\013\045\020\046\006\047\010\054\022\001\002\000\004" +
    "\002\u0105\001\002\000\004\031\034\001\002\000\052\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\034\uffee\035\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\051\uffee\123\uffee" +
    "\001\002\000\052\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\034\ufff1\035\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\051\ufff1\123\ufff1\001\002\000\052\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\034\uffeb\035\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\051\uffeb\123\uffeb\001\002\000" +
    "\052\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\034\ufff3\035" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3" +
    "\123\ufff3\001\002\000\026\002\ufffc\031\ufffc\034\ufffc\035" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\054\ufffc" +
    "\001\002\000\052\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\034\ufff0\035\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\051\ufff0\123\ufff0\001\002\000\052\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\034\uffed\035\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\051\uffed\123\uffed\001\002\000" +
    "\052\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\034\023\035" +
    "\014\043\007\044\013\045\020\046\006\047\010\051\ufff4" +
    "\123\ufff4\001\002\000\026\002\uffff\031\uffff\034\uffff\035" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\054\uffff" +
    "\001\002\000\026\002\000\031\ufff5\034\023\035\014\043" +
    "\007\044\013\045\020\046\006\047\010\054\022\001\002" +
    "\000\052\016\uffef\017\uffef\020\uffef\021\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\034\uffef" +
    "\035\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\051" +
    "\uffef\123\uffef\001\002\000\026\002\ufffd\031\ufffd\034\ufffd" +
    "\035\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\054" +
    "\ufffd\001\002\000\004\123\025\001\002\000\052\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\034\uffec\035\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\051\uffec\123\uffec\001" +
    "\002\000\006\117\027\120\026\001\002\000\006\117\ufffa" +
    "\120\ufffa\001\002\000\006\065\030\123\031\001\002\000" +
    "\026\002\ufffb\031\ufffb\034\ufffb\035\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\054\ufffb\001\002\000\006\117" +
    "\ufff8\120\ufff8\001\002\000\006\117\ufff9\120\ufff9\001\002" +
    "\000\026\002\ufffe\031\ufffe\034\ufffe\035\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\054\ufffe\001\002\000\052" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\034\ufff2\035\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\123" +
    "\ufff2\001\002\000\004\123\035\001\002\000\010\036\ufff7" +
    "\037\ufff7\114\ufff7\001\002\000\010\036\040\037\uffea\114" +
    "\uffea\001\002\000\006\037\042\114\uffe8\001\002\000\004" +
    "\123\041\001\002\000\006\037\uffe9\114\uffe9\001\002\000" +
    "\004\123\u0102\001\002\000\004\114\044\001\002\000\052" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\034\023\035\014\043\007" +
    "\044\013\045\020\046\006\047\010\051\ufff5\115\uffe4\123" +
    "\ufff5\001\002\000\032\016\057\017\062\020\060\021\063" +
    "\023\061\024\073\025\064\026\065\027\056\030\067\051" +
    "\070\123\072\001\002\000\052\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\034\023\035\014\043\007\044\013\045\020\046\006" +
    "\047\010\051\ufff5\115\uffe3\123\ufff5\001\002\000\052\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\034\uffe0\035\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\115\uffe0\123\uffe0" +
    "\001\002\000\052\016\uffde\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\034\uffde" +
    "\035\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\051" +
    "\uffde\115\uffde\123\uffde\001\002\000\052\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\051\uffdf\115\uffdf\123\uffdf\001\002\000" +
    "\004\115\054\001\002\000\052\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\034\uffe2\035\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\051\uffe2\115\uffe2\123\uffe2\001\002\000\026\002" +
    "\ufff6\031\ufff6\034\ufff6\035\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\054\ufff6\001\002\000\052\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\034\uffe1\035\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\051\uffe1\115\uffe1\123\uffe1\001\002" +
    "\000\010\071\uffca\116\uffca\123\uffca\001\002\000\010\071" +
    "\uffd0\116\uffd0\123\uffd0\001\002\000\010\071\uffcc\116\uffcc" +
    "\123\uffcc\001\002\000\010\071\uffcf\116\uffcf\123\uffcf\001" +
    "\002\000\010\071\uffcd\116\uffcd\123\uffcd\001\002\000\010" +
    "\071\uffcb\116\uffcb\123\uffcb\001\002\000\004\072\376\001" +
    "\002\000\004\072\371\001\002\000\004\123\357\001\002" +
    "\000\010\071\uffce\116\uffce\123\uffce\001\002\000\004\123" +
    "\351\001\002\000\010\071\uffc9\116\uffc9\123\uffc9\001\002" +
    "\000\004\110\077\001\002\000\004\072\074\001\002\000" +
    "\026\016\057\017\062\020\060\021\063\023\061\024\073" +
    "\025\064\026\065\027\056\030\067\001\002\000\004\071" +
    "\076\001\002\000\010\071\uffba\116\uffba\123\uffba\001\002" +
    "\000\030\016\057\017\062\020\060\021\063\023\061\024" +
    "\073\025\064\026\065\027\056\030\067\111\uffd7\001\002" +
    "\000\006\111\uffd5\116\uffd5\001\002\000\004\123\345\001" +
    "\002\000\004\111\106\001\002\000\006\111\uffd6\116\104" +
    "\001\002\000\026\016\057\017\062\020\060\021\063\023" +
    "\061\024\073\025\064\026\065\027\056\030\067\001\002" +
    "\000\006\111\uffd4\116\uffd4\001\002\000\004\114\107\001" +
    "\002\000\050\004\125\006\131\007\111\016\057\017\062" +
    "\020\060\021\063\023\061\024\073\025\064\026\065\027" +
    "\056\030\067\050\134\052\116\057\124\114\107\115\120" +
    "\123\127\001\002\000\052\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\034\uffd1\035\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\051\uffd1\115\uffd1\123\uffd1\001\002\000\004\110\341" +
    "\001\002\000\004\123\334\001\002\000\050\004\125\006" +
    "\131\007\111\016\057\017\062\020\060\021\063\023\061" +
    "\024\073\025\064\026\065\027\056\030\067\050\134\052" +
    "\116\057\124\114\107\115\332\123\127\001\002\000\050" +
    "\004\uffc2\006\uffc2\007\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\050\uffc2\052\uffc2\057\uffc2\114\uffc2\115\uffc2\123\uffc2\001" +
    "\002\000\050\004\uffbc\006\uffbc\007\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\050\uffbc\052\uffbc\057\uffbc\114\uffbc\115\uffbc" +
    "\123\uffbc\001\002\000\004\114\107\001\002\000\050\004" +
    "\uffbe\006\uffbe\007\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\050" +
    "\uffbe\052\uffbe\057\uffbe\114\uffbe\115\uffbe\123\uffbe\001\002" +
    "\000\074\004\uffc8\005\uffc8\006\uffc8\007\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\034\uffc8\035\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\057\uffc8\114\uffc8\115\uffc8\123\uffc8\001\002\000\050\004" +
    "\uffc6\006\uffc6\007\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\050" +
    "\uffc6\052\uffc6\057\uffc6\114\uffc6\115\uffc6\123\uffc6\001\002" +
    "\000\050\004\uffc4\006\uffc4\007\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\050\uffc4\052\uffc4\057\uffc4\114\uffc4\115\uffc4\123" +
    "\uffc4\001\002\000\050\004\uffc0\006\uffc0\007\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\050\uffc0\052\uffc0\057\uffc0\114\uffc0" +
    "\115\uffc0\123\uffc0\001\002\000\026\016\057\017\062\020" +
    "\060\021\063\023\061\024\073\025\064\026\065\027\056" +
    "\030\067\001\002\000\004\110\304\001\002\000\050\004" +
    "\uffc3\006\uffc3\007\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\050" +
    "\uffc3\052\uffc3\057\uffc3\114\uffc3\115\uffc3\123\uffc3\001\002" +
    "\000\020\067\264\070\265\077\261\100\263\101\260\102" +
    "\257\103\262\001\002\000\050\004\uffc1\006\uffc1\007\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\050\uffc1\052\uffc1\057\uffc1" +
    "\114\uffc1\115\uffc1\123\uffc1\001\002\000\004\110\224\001" +
    "\002\000\050\004\uffbd\006\uffbd\007\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\050\uffbd\052\uffbd\057\uffbd\114\uffbd\115\uffbd" +
    "\123\uffbd\001\002\000\050\004\uffbf\006\uffbf\007\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\050\uffbf\052\uffbf\057\uffbf\114" +
    "\uffbf\115\uffbf\123\uffbf\001\002\000\026\011\151\012\137" +
    "\015\136\060\152\110\143\117\141\123\154\124\144\125" +
    "\153\127\145\001\002\000\012\013\175\014\176\111\uffb0" +
    "\117\uffb0\001\002\000\020\011\151\012\137\015\136\110" +
    "\201\123\223\124\202\125\203\001\002\000\012\013\uff9e" +
    "\014\uff9e\111\uff9e\117\uff9e\001\002\000\016\071\207\072" +
    "\210\073\213\074\212\075\206\076\211\001\002\000\050" +
    "\004\uff73\006\uff73\007\uff73\016\uff73\017\uff73\020\uff73\021" +
    "\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
    "\050\uff73\052\uff73\057\uff73\114\uff73\115\uff73\123\uff73\001" +
    "\002\000\012\013\uff9c\014\uff9c\111\uff9c\117\uff9c\001\002" +
    "\000\024\011\151\012\137\015\136\060\152\110\143\123" +
    "\154\124\144\125\153\127\145\001\002\000\032\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\071\uff94\072\uff94\073\uff94\074" +
    "\uff94\075\uff94\076\uff94\111\uffa7\117\uffa7\001\002\000\016" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\111\uffa5\117\uffa5\001" +
    "\002\000\004\117\173\001\002\000\016\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\111\uffa9\117\uffa9\001\002\000\016\063" +
    "\156\064\160\065\155\066\157\111\uffaf\117\uffaf\001\002" +
    "\000\012\013\uff9f\014\uff9f\111\uff9f\117\uff9f\001\002\000" +
    "\016\063\uffa4\064\uffa4\065\uffa4\066\uffa4\111\uffa4\117\uffa4" +
    "\001\002\000\032\063\uffa6\064\uffa6\065\uffa6\066\uffa6\071" +
    "\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93\111\uffa6" +
    "\117\uffa6\001\002\000\032\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95" +
    "\111\uffa8\117\uffa8\001\002\000\016\060\152\110\165\123" +
    "\161\124\164\125\162\127\145\001\002\000\016\060\152" +
    "\110\165\123\161\124\164\125\162\127\145\001\002\000" +
    "\016\060\152\110\165\123\161\124\164\125\162\127\145" +
    "\001\002\000\016\060\152\110\165\123\161\124\164\125" +
    "\162\127\145\001\002\000\016\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\111\uffa8\117\uffa8\001\002\000\016\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\111\uffa6\117\uffa6\001\002\000\016" +
    "\063\uffad\064\uffad\065\155\066\157\111\uffad\117\uffad\001" +
    "\002\000\016\063\uffa7\064\uffa7\065\uffa7\066\uffa7\111\uffa7" +
    "\117\uffa7\001\002\000\016\060\152\110\165\123\161\124" +
    "\164\125\162\127\145\001\002\000\014\063\156\064\160" +
    "\065\155\066\157\111\167\001\002\000\016\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\111\uffaa\117\uffaa\001\002\000\016" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\111\uffab\117\uffab\001" +
    "\002\000\016\063\uffae\064\uffae\065\155\066\157\111\uffae" +
    "\117\uffae\001\002\000\016\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\111\uffac\117\uffac\001\002\000\050\004\uff72\006\uff72" +
    "\007\uff72\016\uff72\017\uff72\020\uff72\021\uff72\023\uff72\024" +
    "\uff72\025\uff72\026\uff72\027\uff72\030\uff72\050\uff72\052\uff72" +
    "\057\uff72\114\uff72\115\uff72\123\uff72\001\002\000\010\013" +
    "\175\014\176\111\177\001\002\000\020\011\151\012\137" +
    "\015\136\110\201\123\204\124\202\125\203\001\002\000" +
    "\020\011\151\012\137\015\136\110\201\123\204\124\202" +
    "\125\203\001\002\000\012\013\uff9d\014\uff9d\111\uff9d\117" +
    "\uff9d\001\002\000\012\013\175\014\uffa2\111\uffa2\117\uffa2" +
    "\001\002\000\020\011\151\012\137\015\136\110\201\123" +
    "\204\124\202\125\203\001\002\000\026\013\uff94\014\uff94" +
    "\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\111" +
    "\uff94\117\uff94\001\002\000\026\013\uff93\014\uff93\071\uff93" +
    "\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93\111\uff93\117" +
    "\uff93\001\002\000\026\013\uff95\014\uff95\071\uff95\072\uff95" +
    "\073\uff95\074\uff95\075\uff95\076\uff95\111\uff95\117\uff95\001" +
    "\002\000\012\013\uffa3\014\uffa3\111\uffa3\117\uffa3\001\002" +
    "\000\010\123\204\124\202\125\203\001\002\000\010\123" +
    "\204\124\202\125\203\001\002\000\010\123\204\124\202" +
    "\125\203\001\002\000\010\123\204\124\202\125\203\001" +
    "\002\000\010\123\204\124\202\125\203\001\002\000\010" +
    "\123\204\124\202\125\203\001\002\000\012\013\uff99\014" +
    "\uff99\111\uff99\117\uff99\001\002\000\012\013\uff98\014\uff98" +
    "\111\uff98\117\uff98\001\002\000\012\013\uff96\014\uff96\111" +
    "\uff96\117\uff96\001\002\000\012\013\uff9a\014\uff9a\111\uff9a" +
    "\117\uff9a\001\002\000\012\013\uff9b\014\uff9b\111\uff9b\117" +
    "\uff9b\001\002\000\012\013\uff97\014\uff97\111\uff97\117\uff97" +
    "\001\002\000\012\013\uffa1\014\uffa1\111\uffa1\117\uffa1\001" +
    "\002\000\026\013\uffa0\014\uffa0\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\076\uff95\111\uffa0\117\uffa0\001\002\000" +
    "\032\016\057\017\062\020\060\021\063\023\061\024\073" +
    "\025\064\026\065\027\056\030\067\117\uff7d\123\227\001" +
    "\002\000\004\123\250\001\002\000\004\117\232\001\002" +
    "\000\004\077\230\001\002\000\024\011\151\012\137\015" +
    "\136\060\152\110\143\123\154\124\144\125\153\127\145" +
    "\001\002\000\004\117\uff7a\001\002\000\024\011\151\012" +
    "\137\015\136\060\152\110\143\123\154\124\144\125\153" +
    "\127\145\001\002\000\004\117\234\001\002\000\032\011" +
    "\151\012\137\015\136\060\152\067\237\070\240\110\143" +
    "\111\uff79\123\241\124\144\125\153\127\145\001\002\000" +
    "\004\111\246\001\002\000\004\111\uff78\001\002\000\004" +
    "\123\245\001\002\000\004\123\244\001\002\000\034\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\242\070\243\071\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\111\uffa8\001" +
    "\002\000\004\111\uff77\001\002\000\004\111\uff76\001\002" +
    "\000\004\111\uff74\001\002\000\004\111\uff75\001\002\000" +
    "\046\004\125\006\131\007\111\016\057\017\062\020\060" +
    "\021\063\023\061\024\073\025\064\026\065\027\056\030" +
    "\067\050\134\052\116\057\124\114\107\123\127\001\002" +
    "\000\050\004\uff7f\006\uff7f\007\uff7f\016\uff7f\017\uff7f\020" +
    "\uff7f\021\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\050\uff7f\052\uff7f\057\uff7f\114\uff7f\115\uff7f\123" +
    "\uff7f\001\002\000\010\062\251\077\252\117\uff7c\001\002" +
    "\000\024\011\151\012\137\015\136\060\152\110\143\123" +
    "\154\124\144\125\153\127\145\001\002\000\024\011\151" +
    "\012\137\015\136\060\152\110\143\123\154\124\144\125" +
    "\153\127\145\001\002\000\004\117\uff7b\001\002\000\004" +
    "\111\255\001\002\000\004\114\107\001\002\000\050\004" +
    "\uff7e\006\uff7e\007\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\050" +
    "\uff7e\052\uff7e\057\uff7e\114\uff7e\115\uff7e\123\uff7e\001\002" +
    "\000\024\011\151\012\137\015\136\060\152\110\143\123" +
    "\154\124\144\125\153\127\145\001\002\000\024\011\151" +
    "\012\137\015\136\060\152\110\143\123\154\124\144\125" +
    "\153\127\145\001\002\000\024\011\151\012\137\015\136" +
    "\060\152\110\143\123\154\124\144\125\153\127\145\001" +
    "\002\000\024\011\151\012\137\015\136\060\152\110\143" +
    "\123\154\124\144\125\153\127\145\001\002\000\024\011" +
    "\151\012\137\015\136\060\152\110\143\123\154\124\144" +
    "\125\153\127\145\001\002\000\004\117\267\001\002\000" +
    "\004\117\266\001\002\000\050\004\uff86\006\uff86\007\uff86" +
    "\016\uff86\017\uff86\020\uff86\021\uff86\023\uff86\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\050\uff86\052\uff86\057\uff86" +
    "\114\uff86\115\uff86\123\uff86\001\002\000\050\004\uff87\006" +
    "\uff87\007\uff87\016\uff87\017\uff87\020\uff87\021\uff87\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\050\uff87\052" +
    "\uff87\057\uff87\114\uff87\115\uff87\123\uff87\001\002\000\004" +
    "\117\271\001\002\000\050\004\uff89\006\uff89\007\uff89\016" +
    "\uff89\017\uff89\020\uff89\021\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\050\uff89\052\uff89\057\uff89\114" +
    "\uff89\115\uff89\123\uff89\001\002\000\004\117\273\001\002" +
    "\000\050\004\uff8a\006\uff8a\007\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\050\uff8a\052\uff8a\057\uff8a\114\uff8a\115\uff8a\123" +
    "\uff8a\001\002\000\004\117\277\001\002\000\004\117\276" +
    "\001\002\000\050\004\uff85\006\uff85\007\uff85\016\uff85\017" +
    "\uff85\020\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\050\uff85\052\uff85\057\uff85\114\uff85\115" +
    "\uff85\123\uff85\001\002\000\050\004\uff8c\006\uff8c\007\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\050\uff8c\052\uff8c\057\uff8c" +
    "\114\uff8c\115\uff8c\123\uff8c\001\002\000\004\117\301\001" +
    "\002\000\050\004\uff88\006\uff88\007\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\050\uff88\052\uff88\057\uff88\114\uff88\115\uff88" +
    "\123\uff88\001\002\000\004\117\303\001\002\000\050\004" +
    "\uff8b\006\uff8b\007\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\050" +
    "\uff8b\052\uff8b\057\uff8b\114\uff8b\115\uff8b\123\uff8b\001\002" +
    "\000\020\011\151\012\137\015\136\110\201\123\204\124" +
    "\202\125\203\001\002\000\010\013\175\014\176\111\uff83" +
    "\001\002\000\004\111\307\001\002\000\004\114\107\001" +
    "\002\000\052\004\uff82\005\312\006\uff82\007\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\050\uff82\052\uff82\057\uff82\114\uff82" +
    "\115\uff82\123\uff82\001\002\000\050\004\uff84\006\uff84\007" +
    "\uff84\016\uff84\017\uff84\020\uff84\021\uff84\023\uff84\024\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\050\uff84\052\uff84\057" +
    "\uff84\114\uff84\115\uff84\123\uff84\001\002\000\004\114\107" +
    "\001\002\000\050\004\uff81\006\uff81\007\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\023\uff81\024\uff81\025\uff81\026\uff81" +
    "\027\uff81\030\uff81\050\uff81\052\uff81\057\uff81\114\uff81\115" +
    "\uff81\123\uff81\001\002\000\004\123\315\001\002\000\006" +
    "\077\316\117\317\001\002\000\024\011\151\012\137\015" +
    "\136\060\152\110\143\123\154\124\144\125\153\127\145" +
    "\001\002\000\050\004\uffb2\006\uffb2\007\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\050\uffb2\052\uffb2\057\uffb2\114\uffb2\115" +
    "\uffb2\123\uffb2\001\002\000\004\117\321\001\002\000\050" +
    "\004\uffb1\006\uffb1\007\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\050\uffb1\052\uffb1\057\uffb1\114\uffb1\115\uffb1\123\uffb1\001" +
    "\002\000\004\053\323\001\002\000\004\110\327\001\002" +
    "\000\052\004\uffb8\006\uffb8\007\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\050\uffb8\052\uffb8\053\323\057\uffb8\114\uffb8\115" +
    "\uffb8\123\uffb8\001\002\000\052\004\uffb7\006\uffb7\007\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\050\uffb7\052\uffb7\053\uffb7" +
    "\057\uffb7\114\uffb7\115\uffb7\123\uffb7\001\002\000\052\004" +
    "\uffb6\006\uffb6\007\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\050" +
    "\uffb6\052\uffb6\053\uffb6\057\uffb6\114\uffb6\115\uffb6\123\uffb6" +
    "\001\002\000\004\111\330\001\002\000\004\114\107\001" +
    "\002\000\052\004\uffb5\006\uffb5\007\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\050\uffb5\052\uffb5\053\uffb5\057\uffb5\114\uffb5" +
    "\115\uffb5\123\uffb5\001\002\000\074\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\034\uffc7\035" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\057\uffc7\114\uffc7\115\uffc7\123" +
    "\uffc7\001\002\000\050\004\uffc5\006\uffc5\007\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\050\uffc5\052\uffc5\057\uffc5\114\uffc5" +
    "\115\uffc5\123\uffc5\001\002\000\006\077\335\117\336\001" +
    "\002\000\024\011\151\012\137\015\136\060\152\110\143" +
    "\123\154\124\144\125\153\127\145\001\002\000\050\004" +
    "\uffb4\006\uffb4\007\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\050" +
    "\uffb4\052\uffb4\057\uffb4\114\uffb4\115\uffb4\123\uffb4\001\002" +
    "\000\004\117\340\001\002\000\050\004\uffb3\006\uffb3\007" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\050\uffb3\052\uffb3\057" +
    "\uffb3\114\uffb3\115\uffb3\123\uffb3\001\002\000\024\011\151" +
    "\012\137\015\136\060\152\110\143\123\154\124\144\125" +
    "\153\127\145\001\002\000\004\111\343\001\002\000\004" +
    "\114\107\001\002\000\050\004\uff80\006\uff80\007\uff80\016" +
    "\uff80\017\uff80\020\uff80\021\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\050\uff80\052\uff80\057\uff80\114" +
    "\uff80\115\uff80\123\uff80\001\002\000\010\077\346\111\uffd3" +
    "\116\uffd3\001\002\000\024\011\151\012\137\015\136\060" +
    "\152\110\143\123\154\124\144\125\153\127\145\001\002" +
    "\000\004\117\350\001\002\000\006\111\uffd2\116\uffd2\001" +
    "\002\000\004\110\uffd9\001\002\000\004\110\353\001\002" +
    "\000\030\016\057\017\062\020\060\021\063\023\061\024" +
    "\073\025\064\026\065\027\056\030\067\111\uffd7\001\002" +
    "\000\004\111\355\001\002\000\004\114\107\001\002\000" +
    "\052\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\034\uffd8\035\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\115\uffd8" +
    "\123\uffd8\001\002\000\010\077\361\110\uffdb\117\362\001" +
    "\002\000\004\110\365\001\002\000\024\011\151\012\137" +
    "\015\136\060\152\110\143\123\154\124\144\125\153\127" +
    "\145\001\002\000\052\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\034" +
    "\uffdd\035\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\051\uffdd\115\uffdd\123\uffdd\001\002\000\004\117\364\001" +
    "\002\000\052\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\034\uffdc\035" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc" +
    "\115\uffdc\123\uffdc\001\002\000\030\016\057\017\062\020" +
    "\060\021\063\023\061\024\073\025\064\026\065\027\056" +
    "\030\067\111\uffd7\001\002\000\004\111\367\001\002\000" +
    "\004\114\107\001\002\000\052\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\034\uffda\035\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\051\uffda\115\uffda\123\uffda\001\002\000\026\016" +
    "\057\017\062\020\060\021\063\023\061\024\073\025\064" +
    "\026\065\027\056\030\067\001\002\000\004\116\373\001" +
    "\002\000\026\016\057\017\062\020\060\021\063\023\061" +
    "\024\073\025\064\026\065\027\056\030\067\001\002\000" +
    "\004\071\375\001\002\000\010\071\uffbb\116\uffbb\123\uffbb" +
    "\001\002\000\026\016\057\017\062\020\060\021\063\023" +
    "\061\024\073\025\064\026\065\027\056\030\067\001\002" +
    "\000\004\071\u0100\001\002\000\010\071\uffb9\116\uffb9\123" +
    "\uffb9\001\002\000\006\114\uffe7\116\u0103\001\002\000\006" +
    "\114\uffe6\116\uffe6\001\002\000\004\123\u0104\001\002\000" +
    "\006\114\uffe5\116\uffe5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\022\002\003\003\004\007\011\011\014\012" +
    "\010\013\015\014\016\015\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\032\001\001\000" +
    "\002\001\001\000\016\003\004\007\011\011\014\012\010" +
    "\013\031\015\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\035\001" +
    "\001\000\004\004\036\001\001\000\004\005\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0100\001" +
    "\001\000\002\001\001\000\024\003\044\010\051\011\014" +
    "\012\010\017\045\020\052\021\046\022\050\023\047\001" +
    "\001\000\006\024\065\070\070\001\001\000\020\003\044" +
    "\011\014\012\010\020\054\021\046\022\050\023\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\074\070\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\100\025\101\026\102\027\077\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\100\027\104\070\070\001\001\000\002" +
    "\001\001\000\004\055\107\001\001\000\034\024\111\030" +
    "\112\031\131\042\113\044\120\045\127\046\122\047\132" +
    "\050\121\053\125\055\114\060\116\070\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\024\111\031\131\042\113\044\332\045\127\046\122\047" +
    "\132\050\121\053\125\055\114\060\116\070\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\313\070" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\073\146\074\147\075\145" +
    "\076\137\077\134\100\141\001\001\000\002\001\001\000" +
    "\010\076\137\077\221\100\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\073\146\074\165\076\137\077\173\100\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\146\074\171\001\001\000\006\073\146\074\170\001\001" +
    "\000\006\073\146\074\167\001\001\000\006\073\146\074" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\146\074\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\076\137\077\204\100\141\001\001" +
    "\000\010\076\137\077\177\100\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\076\137\077\173\100\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\220\001\001\000\004" +
    "\076\217\001\001\000\004\076\216\001\001\000\004\076" +
    "\215\001\001\000\004\076\214\001\001\000\004\076\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\224\061" +
    "\225\070\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\073\146\074\147\075\230\076" +
    "\137\077\134\100\141\001\001\000\002\001\001\000\016" +
    "\073\146\074\147\075\232\076\137\077\134\100\141\001" +
    "\001\000\002\001\001\000\020\062\234\073\146\074\147" +
    "\075\235\076\137\077\134\100\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\024\111\031\131" +
    "\042\113\044\246\045\127\046\122\047\132\050\121\053" +
    "\125\055\114\060\116\070\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\073\146\074\147\075\253\076" +
    "\137\077\134\100\141\001\001\000\016\073\146\074\147" +
    "\075\252\076\137\077\134\100\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\255\001\001\000\002" +
    "\001\001\000\016\073\146\074\147\075\301\076\137\077" +
    "\134\100\141\001\001\000\016\073\146\074\147\075\277" +
    "\076\137\077\134\100\141\001\001\000\020\040\274\073" +
    "\146\074\147\075\273\076\137\077\134\100\141\001\001" +
    "\000\016\073\146\074\147\075\271\076\137\077\134\100" +
    "\141\001\001\000\016\073\146\074\147\075\267\076\137" +
    "\077\134\100\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\071\305\076\137\077\304" +
    "\100\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\307\001\001\000\004\043\310\001\001\000\002" +
    "\001\001\000\004\055\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\073\146\074\147" +
    "\075\317\076\137\077\134\100\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\323" +
    "\033\324\001\001\000\002\001\001\000\004\033\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\073\146" +
    "\074\147\075\336\076\137\077\134\100\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\073\146\074\147\075\341\076\137\077\134\100\141\001" +
    "\001\000\002\001\001\000\004\055\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\073\146\074\147\075" +
    "\346\076\137\077\134\100\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\351\001\001\000\002\001" +
    "\001\000\014\024\100\025\353\026\102\027\077\070\070" +
    "\001\001\000\002\001\001\000\004\055\355\001\001\000" +
    "\002\001\001\000\004\102\357\001\001\000\002\001\001" +
    "\000\016\073\146\074\147\075\362\076\137\077\134\100" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\100\025\365\026\102\027\077\070" +
    "\070\001\001\000\002\001\001\000\004\055\367\001\001" +
    "\000\002\001\001\000\006\024\371\070\070\001\001\000" +
    "\002\001\001\000\006\024\373\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\376\070\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public TablaSimbolos tabla = new TablaSimbolos();  // Tabla de símbolos
    public AnalizadorSemantico semantico = new AnalizadorSemantico(tabla);  // Integrado directamente

    public void syntax_error(Symbol s){
        this.s = s;
        System.err.println("Error de sintaxis en : " + s.value);
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    // Variables que se usarán en las acciones semánticas
    String tipoActual = "";
    String modificadorActual = "";

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_return ::= PALABRA_RESERVADA_RETURN expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_return",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_return ::= PALABRA_RESERVADA_RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_return",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresion_for ::= OPERADOR_DISMINUCION IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresion_for ::= OPERADOR_INCREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresion_for ::= IDENTIFICADOR OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresion_for ::= IDENTIFICADOR OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresion_for ::= expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion_for ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracion_for ::= IDENTIFICADOR OPERADOR_ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracion_for ::= tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declaracion_for ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declaracion_for ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_for ::= PALABRA_RESERVADA_FOR OPERADOR_PARENTESIS_ABRIR tipo IDENTIFICADOR OPERADOR_RANGO expresion OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_for ::= PALABRA_RESERVADA_FOR OPERADOR_PARENTESIS_ABRIR declaracion_for PUNTO_Y_COMA expresion PUNTO_Y_COMA expresion_for OPERADOR_PARENTESIS_CERRAR sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_while ::= PALABRA_RESERVADA_WHILE OPERADOR_PARENTESIS_ABRIR expresion OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_while",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_else ::= PALABRA_RESERVADA_ELSE bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_else",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_else ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_else",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion_if ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_if",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_if ::= PALABRA_RESERVADA_IF OPERADOR_PARENTESIS_ABRIR expresion_if OPERADOR_PARENTESIS_CERRAR bloque sentencia_else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_if",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION expresion_aritmetica PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_DISMINUCION PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_INCREMENTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_DIVISION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_MULTIPLICACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_SUSTRACCION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_ADICION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        Simbolo sim = tabla.buscar(id.toString());
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (sim == null) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' no ha sido declarada");
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' no ha sido declarada");
        } else {
            // Verificar si es constante
            if (sim.tipo.equals("constante")) {
                System.err.println("Error semántico línea " + eleft + 
                    ": No se puede reasignar la constante '" + id + "'");
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ha sido declarada como constante");
            }
            
            // TODO: Verificar compatibilidad de tipos
            // if (!sonTiposCompatibles(sim.tipoDato, e.tipo)) { ... }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // simple_operador ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // simple_operador ::= OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // simple_operador ::= OPERADOR_DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // simple_operador ::= OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // simple_operador ::= OPERADOR_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // simple_operador ::= OPERADOR_ADICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion_numerica ::= LITERAL_NUM_FLOTANTE 
            {
              Expresion RESULT =null;
		int ent2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto decimal el tipo es:"+ ent2.toString());
        RESULT = new Expresion("float",ent2.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_numerica",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion_numerica ::= LITERAL_NUM_ENTERO 
            {
              Expresion RESULT =null;
		int ent1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto entero el tipo es:"+ ent1.toString());
        RESULT = new Expresion("int",ent1.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_numerica",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion_numerica ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        Simbolo sim = tabla.buscar(id.toString());
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (sim == null) {
            System.err.println("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                semantico.addError("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                RESULT = new Expresion("null","null");

        }else{
                RESULT = new Expresion(sim.tipoDato,sim.valor.toString());
        }
        
        // Retornar el tipo para verificaciones posteriores
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_numerica",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion_relacional ::= expresion_numerica OPERADOR_DISTINTO expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"!=" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion_relacional ::= expresion_numerica OPERADOR_IGUAL expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"==" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion_relacional ::= expresion_numerica OPERADOR_MENOR_IGUAL_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"<=" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion_relacional ::= expresion_numerica OPERADOR_MAYOR_IGUAL_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +">=" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion_relacional ::= expresion_numerica OPERADOR_MENOR_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"<" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion_relacional ::= expresion_numerica OPERADOR_MAYOR_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +">" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion_logica ::= expresion_relacional 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_logica ::= OPERADOR_PARENTESIS_ABRIR expresion_logica OPERADOR_PARENTESIS_CERRAR 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new Expresion( "boolean","("+exp.getValor()+")");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_logica ::= PALABRA_RESERVADA_FALSE 
            {
              Expresion RESULT =null;
		
        RESULT = new Expresion( "boolean", "false");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion_logica ::= PALABRA_RESERVADA_TRUE 
            {
              Expresion RESULT =null;
		
        RESULT = new Expresion( "boolean", "true");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion_logica ::= OPERADOR_NOT IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", "!" +id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_logica ::= OPERADOR_NOT expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", "!" +exp.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_logica ::= expresion_logica OPERADOR_OR expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"||" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_logica ::= expresion_logica OPERADOR_AND expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"&&" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_primaria ::= PALABRA_RESERVADA_NULL 
            {
              Expresion RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto null el tipo es:"+ ent.toString());
        RESULT = new Expresion("null","null");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_primaria ::= LITERAL_STRING 
            {
              Expresion RESULT =null;
		int ent3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto string el tipo es:"+ ent3.toString());
        RESULT = new Expresion("String",ent3.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_primaria ::= LITERAL_NUM_FLOTANTE 
            {
              Expresion RESULT =null;
		int ent2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto decimal el tipo es:"+ ent2.toString());
        RESULT = new Expresion("float",ent2.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_primaria ::= LITERAL_NUM_ENTERO 
            {
              Expresion RESULT =null;
		int ent1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto entero el tipo es:"+ ent1.toString());
        RESULT = new Expresion("int",ent1.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_primaria ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        Simbolo sim = tabla.buscar(id.toString());
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (sim == null) {
            System.err.println("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                semantico.addError("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                RESULT = new Expresion("","");

        }else{
                RESULT = new Expresion(sim.tipoDato,sim.valor.toString());
        }
        
        // Retornar el tipo para verificaciones posteriores
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_matematica ::= expresion_primaria 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = exp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_matematica ::= OPERADOR_PARENTESIS_ABRIR expresion_matematica OPERADOR_PARENTESIS_CERRAR 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new Expresion( exp_mat.getTipo(), "("+exp_mat.getValor()+")");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_matematica ::= expresion_matematica OPERADOR_DIVISION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor() +"/" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion_matematica ::= expresion_matematica OPERADOR_MULTIPLICACION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor() +"*" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion_matematica ::= expresion_matematica OPERADOR_SUSTRACCION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor()+ "-" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion_matematica ::= expresion_matematica OPERADOR_ADICION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor() +"+" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion_matematica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = exp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = exp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion_variable_local ::= PALABRA_RESERVADA_CONST tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;


        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "constante", tipoActual, eleft,e.getValor());
            System.out.println("Declarando variable local con asignación: " + id.toString());
            if(semantico.sonTiposCompatibles(tipoActual,e.getTipo())){
                System.out.println("Declarando variable local con asignación: " + id.toString());
            }else{
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' espera un dato del tipo: "+tipoActual );
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_variable_local ::= PALABRA_RESERVADA_CONST tipo IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                

        } else {
            tabla.agregar(id.toString(), "constante", tipoActual, idleft,null);
            System.out.println("Declarando constante: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion_variable_local ::= tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;


        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "variable", tipoActual, eleft,e.getValor());
            System.out.println("Declarando variable local con asignación: " + id.toString());
            if(semantico.sonTiposCompatibles(tipoActual,e.getTipo())){
                System.out.println("Declarando variable local con asignación: " + id.toString());
            }else{
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' espera un dato del tipo: "+tipoActual );
            }
            // TODO: Verificar que el tipo de 'e' sea compatible con tipoActual
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion_variable_local ::= tipo IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "variable", tipoActual, idleft,null);
            System.out.println("Declarando variable local: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // catch ::= PALABRA_RESERVADA_CATCH OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("catch",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_catch ::= lista_catch catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_catch",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_catch ::= catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_catch",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_try_catch ::= PALABRA_RESERVADA_TRY bloque lista_catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_try_catch",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_compuesto ::= PALABRA_RESERVADA_ARRAYLIST OPERADOR_MENOR_QUE tipo OPERADOR_MAYOR_QUE 
            {
              Object RESULT =null;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object elementType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        tipoActual = "ArrayList<" + elementType + ">"; 
        RESULT = tipoActual;
        System.out.println("Tipo compuesto: " + tipoActual);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_compuesto",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_compuesto ::= PALABRA_RESERVADA_LIST OPERADOR_MENOR_QUE tipo OPERADOR_MAYOR_QUE 
            {
              Object RESULT =null;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object elementType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        tipoActual = "List<" + elementType + ">"; 
        RESULT = tipoActual;
        System.out.println("Tipo compuesto: " + tipoActual);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_compuesto",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_compuesto ::= PALABRA_RESERVADA_MAP OPERADOR_MENOR_QUE tipo COMA tipo OPERADOR_MAYOR_QUE 
            {
              Object RESULT =null;
		int keyTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int keyTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object keyType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valueTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valueTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valueType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        tipoActual = "Map<" + keyType + "," + valueType + ">"; 
        RESULT = tipoActual;
        System.out.println("Tipo compuesto: " + tipoActual);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_compuesto",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentencia_try_catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentencia_llamada_metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentencia_return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= declaracion_variable_local 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_sentencias",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_sentencias",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque ::= OPERADOR_LLAVE_ABRIR lista_sentencias OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque ::= OPERADOR_LLAVE_ABRIR OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= tipo_compuesto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= PALABRA_RESERVADA_BOOLEAN 
            {
              Object RESULT =null;
		 
        tipoActual = "boolean"; 
        RESULT = "boolean";
        System.out.println("Tipo actual: boolean");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= PALABRA_RESERVADA_LONG 
            {
              Object RESULT =null;
		 
        tipoActual = "long"; 
        RESULT = "long";
        System.out.println("Tipo actual: long");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= PALABRA_RESERVADA_CHAR 
            {
              Object RESULT =null;
		 
        tipoActual = "char"; 
        RESULT = "char";
        System.out.println("Tipo actual: char");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= PALABRA_RESERVADA_FLOAT 
            {
              Object RESULT =null;
		 
        tipoActual = "float"; 
        RESULT = "float";
        System.out.println("Tipo actual: float");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= PALABRA_RESERVADA_DOUBLE 
            {
              Object RESULT =null;
		 
        tipoActual = "double"; 
        RESULT = "double";
        System.out.println("Tipo actual: double");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= PALABRA_RESERVADA_STRING 
            {
              Object RESULT =null;
		 
        tipoActual = "String"; 
        RESULT = "String";
        System.out.println("Tipo actual: String");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= PALABRA_RESERVADA_INT 
            {
              Object RESULT =null;
		 
        tipoActual = "int"; 
        RESULT = "int";
        System.out.println("Tipo actual: int");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_constructor ::= modificadores_clase IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_constructor",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro ::= tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "parametro", tipoActual, 0,null);
        System.out.println("Declarando parámetro: " + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_metodo ::= modificadores_clase PALABRA_RESERVADA_VOID IDENTIFICADOR NT$2 OPERADOR_PARENTESIS_ABRIR parametros OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.salirAmbito();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "metodo", "void", 0,null);
        System.out.println("Declarando método void: " + id.toString());
        tabla.entrarAmbito("metodo_" + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_metodo ::= modificadores_clase tipo IDENTIFICADOR NT$1 OPERADOR_PARENTESIS_ABRIR parametros OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.salirAmbito();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "metodo", tipoActual, 0,null);
        System.out.println("Declarando método: " + id.toString());
        tabla.entrarAmbito("metodo_" + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_atributo ::= modificadores_clase tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;


        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "variable", tipoActual, eleft,e.getValor());
            System.out.println("Declarando variable local con asignación: " + id.toString());
            if(semantico.sonTiposCompatibles(tipoActual,e.getTipo())){
                System.out.println("Declarando variable local con asignación: " + id.toString());
            }else{
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' espera un dato del tipo: "+tipoActual );
            }
            // TODO: Verificar que el tipo de 'e' sea compatible con tipoActual
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_atributo",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_atributo ::= modificadores_clase tipo IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "atributo", tipoActual, 0,null);
        System.out.println("Declarando atributo: " + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_atributo",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // miembro ::= declaracion_constructor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("miembro",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // miembro ::= declaracion_metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("miembro",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // miembro ::= declaracion_atributo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("miembro",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_miembros ::= lista_miembros miembro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_miembros",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_miembros ::= miembro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_miembros",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_clase ::= lista_miembros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_clase ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_interfaces ::= lista_interfaces COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_interfaces",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_interfaces ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_interfaces",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // implementacion ::= PALABRA_RESERVADA_IMPLEMENTS lista_interfaces 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("implementacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // implementacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("implementacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // herencia ::= PALABRA_RESERVADA_EXTENDS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("herencia",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // herencia ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("herencia",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modificador ::= PALABRA_RESERVADA_OVERRIDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modificador ::= PALABRA_RESERVADA_ABSTRACT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // modificador ::= PALABRA_RESERVADA_FINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // modificador ::= PALABRA_RESERVADA_STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modificador ::= PALABRA_RESERVADA_PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // modificador ::= PALABRA_RESERVADA_PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // modificador ::= PALABRA_RESERVADA_PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_modificadores ::= lista_modificadores modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_modificadores",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_modificadores ::= modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_modificadores",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // modificadores_clase ::= lista_modificadores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificadores_clase",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // modificadores_clase ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificadores_clase",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_clase ::= modificadores_clase PALABRA_RESERVADA_CLASS IDENTIFICADOR NT$0 herencia implementacion OPERADOR_LLAVE_ABRIR cuerpo_clase OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.salirAmbito();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_clase",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "clase", "N/A", 0,null);
        System.out.println("Declarando clase: " + id.toString());
        tabla.entrarAmbito("clase_" + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ruta_import ::= ruta_import PUNTO OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ruta_import",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ruta_import ::= ruta_import PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ruta_import",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ruta_import ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ruta_import",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_import ::= PALABRA_RESERVADA_IMPORT ruta_import PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
        System.out.println("Importando: Ruta ");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_import",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= declaracion_clase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= declaracion_import 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_declaraciones ::= lista_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_declaraciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

