/* The following code was generated by JFlex 1.4.3 on 17/07/25, 7:36 p. m. */

package compi;

import static compi.Tokens.*;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/07/25, 7:36 p. m. from the specification file
 * <tt>C:/Users/joset/OneDrive/Desktop/TODO/Universidad-UNT/Compiladores/antes/AnalizadorSintacticoja/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\7\2\0\1\11\22\0\1\11\1\46\1\10\3\0"+
    "\1\44\1\5\1\57\1\60\1\53\1\52\1\50\1\3\1\4\1\54"+
    "\12\2\1\0\1\51\1\56\1\55\1\47\2\0\1\32\12\1\1\31"+
    "\1\34\5\1\1\30\7\1\1\61\1\6\1\62\1\0\1\1\1\0"+
    "\1\25\1\36\1\26\1\42\1\14\1\13\1\27\1\22\1\12\2\1"+
    "\1\15\1\40\1\23\1\17\1\35\1\1\1\20\1\16\1\24\1\37"+
    "\1\43\1\21\1\41\1\33\1\1\1\63\1\45\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\23\2\2\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\30\1\31\1\32\4\0"+
    "\1\33\1\34\42\2\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\3\2\1\55\14\2\1\56"+
    "\1\2\1\57\12\2\1\60\5\2\1\61\1\62\1\63"+
    "\1\0\1\64\6\2\1\65\1\66\1\2\1\67\6\2"+
    "\1\70\1\71\1\72\1\73\3\2\1\74\2\2\1\75"+
    "\5\2\1\76\1\77\3\2\1\100\1\101\1\102\1\2"+
    "\1\103\1\2\1\104\2\2\1\105\1\2\1\106\1\107"+
    "\1\110\10\2\1\111\1\2\1\112\1\2\1\113\1\2"+
    "\1\114\3\2\1\115\3\2\1\116\3\2\1\117\1\2"+
    "\1\120\2\2\1\121\1\122\2\2\1\123\1\2\1\124"+
    "\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\65\0\65\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u07a9\0\65\0\65"+
    "\0\65\0\65\0\u07de\0\u0813\0\u01a8\0\u0848\0\65\0\152"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\65\0\65\0\65\0\u0f87\0\65\0\65"+
    "\0\65\0\65\0\u0fbc\0\u0ff1\0\65\0\65\0\65\0\u1026"+
    "\0\u07a9\0\65\0\u105b\0\u1090\0\u10c5\0\u10fa\0\152\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\152\0\u13ab\0\152\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\152\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\152\0\152"+
    "\0\65\0\u16fb\0\65\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\152\0\152\0\u186e\0\152\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\152\0\152\0\152\0\152\0\u19e1"+
    "\0\u1a16\0\u1a4b\0\152\0\u1a80\0\u1ab5\0\152\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\152\0\65\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\152\0\152\0\152\0\u1c92\0\152\0\u1cc7\0\152\0\u1cfc"+
    "\0\u1d31\0\152\0\u1d66\0\152\0\152\0\152\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\152\0\u1f43"+
    "\0\152\0\u1f78\0\152\0\u1fad\0\152\0\u1fe2\0\u2017\0\u204c"+
    "\0\152\0\u2081\0\u20b6\0\u20eb\0\152\0\u2120\0\u2155\0\u218a"+
    "\0\152\0\u21bf\0\152\0\u21f4\0\u2229\0\152\0\152\0\u225e"+
    "\0\u2293\0\152\0\u22c8\0\152\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\10\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\3"+
    "\1\26\1\27\1\30\1\3\1\31\1\32\1\33\4\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\66\0\2\3\7\0\32\3\23\0\1\4"+
    "\1\0\1\56\62\0\1\4\1\57\43\0\1\60\5\0"+
    "\1\61\13\0\1\62\60\0\5\63\1\0\1\64\56\63"+
    "\7\0\1\10\1\0\1\10\53\0\6\65\1\66\1\65"+
    "\1\67\54\65\1\0\2\3\7\0\1\3\1\70\7\3"+
    "\1\71\14\3\1\72\3\3\22\0\2\3\7\0\1\73"+
    "\2\3\1\74\1\3\1\75\5\3\1\76\16\3\22\0"+
    "\2\3\7\0\3\3\1\77\5\3\1\100\15\3\1\101"+
    "\2\3\22\0\2\3\7\0\5\3\1\102\24\3\22\0"+
    "\2\3\7\0\10\3\1\103\1\3\1\104\12\3\1\105"+
    "\4\3\22\0\2\3\7\0\31\3\1\106\22\0\2\3"+
    "\7\0\2\3\1\107\27\3\22\0\2\3\7\0\10\3"+
    "\1\110\21\3\22\0\2\3\7\0\2\3\1\111\22\3"+
    "\1\112\4\3\22\0\2\3\7\0\6\3\1\113\1\3"+
    "\1\114\21\3\22\0\2\3\7\0\24\3\1\115\5\3"+
    "\22\0\2\3\7\0\3\3\1\116\1\3\1\117\2\3"+
    "\1\120\2\3\1\121\16\3\22\0\2\3\7\0\12\3"+
    "\1\122\17\3\22\0\2\3\7\0\1\123\31\3\22\0"+
    "\2\3\7\0\6\3\1\124\23\3\22\0\2\3\7\0"+
    "\13\3\1\125\16\3\22\0\2\3\7\0\6\3\1\126"+
    "\16\3\1\127\4\3\22\0\2\3\7\0\5\3\1\130"+
    "\24\3\22\0\2\3\7\0\5\3\1\131\5\3\1\132"+
    "\16\3\65\0\1\133\65\0\1\134\74\0\1\135\56\0"+
    "\1\136\5\0\1\137\61\0\1\140\2\0\1\141\64\0"+
    "\1\142\62\0\1\143\1\144\1\145\64\0\1\146\64\0"+
    "\1\147\1\150\10\0\1\151\67\0\1\152\57\0\7\63"+
    "\1\0\55\63\7\65\1\0\55\65\1\0\2\3\7\0"+
    "\12\3\1\153\17\3\22\0\2\3\7\0\23\3\1\154"+
    "\6\3\22\0\2\3\7\0\11\3\1\155\20\3\22\0"+
    "\2\3\7\0\5\3\1\156\24\3\22\0\2\3\7\0"+
    "\6\3\1\157\23\3\22\0\2\3\7\0\3\3\1\160"+
    "\26\3\22\0\2\3\7\0\4\3\1\161\25\3\22\0"+
    "\2\3\7\0\25\3\1\162\4\3\22\0\2\3\7\0"+
    "\12\3\1\163\17\3\22\0\2\3\7\0\11\3\1\164"+
    "\20\3\22\0\2\3\7\0\5\3\1\165\24\3\22\0"+
    "\2\3\7\0\13\3\1\166\16\3\22\0\2\3\7\0"+
    "\23\3\1\167\6\3\22\0\2\3\7\0\2\3\1\170"+
    "\27\3\22\0\2\3\7\0\12\3\1\171\17\3\22\0"+
    "\2\3\7\0\1\172\1\3\1\173\27\3\22\0\2\3"+
    "\7\0\7\3\1\174\22\3\22\0\2\3\7\0\3\3"+
    "\1\175\26\3\22\0\2\3\7\0\21\3\1\176\3\3"+
    "\1\177\4\3\22\0\2\3\7\0\1\200\31\3\22\0"+
    "\2\3\7\0\4\3\1\201\25\3\22\0\2\3\7\0"+
    "\13\3\1\202\16\3\22\0\2\3\7\0\11\3\1\203"+
    "\20\3\22\0\2\3\7\0\13\3\1\204\16\3\22\0"+
    "\2\3\7\0\12\3\1\205\17\3\22\0\2\3\7\0"+
    "\6\3\1\206\23\3\22\0\2\3\7\0\4\3\1\207"+
    "\25\3\22\0\2\3\7\0\6\3\1\210\23\3\22\0"+
    "\2\3\7\0\23\3\1\211\6\3\22\0\2\3\7\0"+
    "\1\212\4\3\1\213\24\3\22\0\2\3\7\0\24\3"+
    "\1\214\5\3\22\0\2\3\7\0\5\3\1\215\24\3"+
    "\22\0\2\3\7\0\1\216\31\3\22\0\2\3\7\0"+
    "\3\3\1\217\2\3\1\220\23\3\76\0\1\221\7\0"+
    "\53\143\1\222\11\143\7\144\1\0\55\144\55\0\1\223"+
    "\10\0\2\3\7\0\2\3\1\224\27\3\22\0\2\3"+
    "\7\0\3\3\1\225\1\3\1\226\24\3\22\0\2\3"+
    "\7\0\13\3\1\227\16\3\22\0\2\3\7\0\13\3"+
    "\1\230\16\3\22\0\2\3\7\0\4\3\1\231\25\3"+
    "\22\0\2\3\7\0\2\3\1\232\27\3\22\0\2\3"+
    "\7\0\26\3\1\233\3\3\22\0\2\3\7\0\2\3"+
    "\1\234\27\3\22\0\2\3\7\0\15\3\1\235\14\3"+
    "\22\0\2\3\7\0\6\3\1\236\23\3\22\0\2\3"+
    "\7\0\12\3\1\237\17\3\22\0\2\3\7\0\2\3"+
    "\1\240\27\3\22\0\2\3\7\0\6\3\1\241\23\3"+
    "\22\0\2\3\7\0\25\3\1\242\4\3\22\0\2\3"+
    "\7\0\3\3\1\243\26\3\22\0\2\3\7\0\11\3"+
    "\1\244\20\3\22\0\2\3\7\0\3\3\1\245\26\3"+
    "\22\0\2\3\7\0\2\3\1\246\27\3\22\0\2\3"+
    "\7\0\4\3\1\247\25\3\22\0\2\3\7\0\12\3"+
    "\1\250\17\3\22\0\2\3\7\0\4\3\1\251\25\3"+
    "\22\0\2\3\7\0\4\3\1\252\25\3\22\0\2\3"+
    "\7\0\6\3\1\253\23\3\22\0\2\3\7\0\14\3"+
    "\1\254\15\3\22\0\2\3\7\0\1\255\31\3\22\0"+
    "\2\3\7\0\12\3\1\256\17\3\22\0\2\3\7\0"+
    "\13\3\1\257\16\3\22\0\2\3\7\0\31\3\1\260"+
    "\22\0\2\3\7\0\12\3\1\261\17\3\22\0\2\3"+
    "\7\0\3\3\1\262\26\3\22\0\2\3\7\0\3\3"+
    "\1\263\26\3\22\0\2\3\7\0\30\3\1\264\1\3"+
    "\21\0\53\143\1\222\1\265\10\143\1\0\2\3\7\0"+
    "\6\3\1\266\23\3\22\0\2\3\7\0\2\3\1\267"+
    "\27\3\22\0\2\3\7\0\6\3\1\270\23\3\22\0"+
    "\2\3\7\0\3\3\1\271\26\3\22\0\2\3\7\0"+
    "\12\3\1\272\17\3\22\0\2\3\7\0\2\3\1\273"+
    "\27\3\22\0\2\3\7\0\11\3\1\274\20\3\22\0"+
    "\2\3\7\0\12\3\1\275\17\3\22\0\2\3\7\0"+
    "\1\276\31\3\22\0\2\3\7\0\6\3\1\277\23\3"+
    "\22\0\2\3\7\0\6\3\1\300\23\3\22\0\2\3"+
    "\7\0\6\3\1\301\23\3\22\0\2\3\7\0\2\3"+
    "\1\302\27\3\22\0\2\3\7\0\6\3\1\303\23\3"+
    "\22\0\2\3\7\0\4\3\1\304\25\3\22\0\2\3"+
    "\7\0\12\3\1\305\17\3\22\0\2\3\7\0\10\3"+
    "\1\306\21\3\22\0\2\3\7\0\11\3\1\307\20\3"+
    "\22\0\2\3\7\0\21\3\1\310\10\3\22\0\2\3"+
    "\7\0\13\3\1\311\16\3\22\0\2\3\7\0\2\3"+
    "\1\312\27\3\22\0\2\3\7\0\1\313\31\3\22\0"+
    "\2\3\7\0\2\3\1\314\27\3\22\0\2\3\7\0"+
    "\1\3\1\315\30\3\22\0\2\3\7\0\26\3\1\316"+
    "\3\3\22\0\2\3\7\0\12\3\1\317\17\3\22\0"+
    "\2\3\7\0\30\3\1\320\1\3\22\0\2\3\7\0"+
    "\14\3\1\321\15\3\22\0\2\3\7\0\1\322\31\3"+
    "\22\0\2\3\7\0\11\3\1\323\20\3\22\0\2\3"+
    "\7\0\13\3\1\324\16\3\22\0\2\3\7\0\15\3"+
    "\1\325\14\3\22\0\2\3\7\0\17\3\1\326\12\3"+
    "\22\0\2\3\7\0\12\3\1\327\17\3\22\0\2\3"+
    "\7\0\14\3\1\330\15\3\22\0\2\3\7\0\14\3"+
    "\1\331\15\3\22\0\2\3\7\0\13\3\1\332\16\3"+
    "\22\0\2\3\7\0\13\3\1\333\16\3\22\0\2\3"+
    "\7\0\2\3\1\334\27\3\22\0\2\3\7\0\4\3"+
    "\1\335\25\3\22\0\2\3\7\0\30\3\1\336\1\3"+
    "\22\0\2\3\7\0\14\3\1\337\15\3\22\0\2\3"+
    "\7\0\1\340\31\3\22\0\2\3\7\0\2\3\1\341"+
    "\27\3\22\0\2\3\7\0\12\3\1\342\17\3\22\0"+
    "\2\3\7\0\11\3\1\343\20\3\22\0\2\3\7\0"+
    "\14\3\1\344\15\3\22\0\2\3\7\0\11\3\1\345"+
    "\20\3\22\0\2\3\7\0\2\3\1\346\27\3\22\0"+
    "\2\3\7\0\12\3\1\347\17\3\22\0\2\3\7\0"+
    "\4\3\1\350\25\3\22\0\2\3\7\0\2\3\1\351"+
    "\27\3\22\0\2\3\7\0\2\3\1\352\27\3\22\0"+
    "\2\3\7\0\12\3\1\353\17\3\22\0\2\3\7\0"+
    "\12\3\1\354\17\3\22\0\2\3\7\0\30\3\1\355"+
    "\1\3\22\0\2\3\7\0\4\3\1\356\25\3\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8957];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\2\11\5\1\6\11\1\0\4\11"+
    "\4\0\1\11\43\1\3\11\1\1\4\11\1\0\1\1"+
    "\3\11\2\1\1\11\46\1\1\11\1\0\1\11\41\1"+
    "\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 85: 
          { lexeme = yytext(); return PALABRA_RESERVADA_PROTECTED;
          }
        case 87: break;
        case 55: 
          { lexeme = yytext(); return PALABRA_RESERVADA_LONG;
          }
        case 88: break;
        case 2: 
          { lexeme = yytext(); return IDENTIFICADOR;
          }
        case 89: break;
        case 57: 
          { lexeme = yytext(); return PALABRA_RESERVADA_NULL;
          }
        case 90: break;
        case 1: 
          { lexeme = yytext(); return OPERADOR_PUNTO;
          }
        case 91: break;
        case 10: 
          { return COMA;
          }
        case 92: break;
        case 73: 
          { lexeme = yytext(); return PALABRA_RESERVADA_IMPORT;
          }
        case 93: break;
        case 23: 
          { return OPERADOR_DISMINUCION;
          }
        case 94: break;
        case 36: 
          { return OPERADOR_ASIGNACION_MULTIPLICACION;
          }
        case 95: break;
        case 54: 
          { lexeme = yytext(); return PALABRA_RESERVADA_ENUM;
          }
        case 96: break;
        case 76: 
          { lexeme = yytext(); return PALABRA_RESERVADA_STRING;
          }
        case 97: break;
        case 43: 
          { lexeme = yytext(); return LITERAL_CARACTER;
          }
        case 98: break;
        case 60: 
          { lexeme = yytext(); return PALABRA_RESERVADA_CHAR;
          }
        case 99: break;
        case 67: 
          { lexeme = yytext(); return PALABRA_RESERVADA_SHORT;
          }
        case 100: break;
        case 26: 
          { return OPERADOR_RANGO;
          }
        case 101: break;
        case 32: 
          { return OPERADOR_DESPLAZAMIENTO_DERECHA;
          }
        case 102: break;
        case 86: 
          { lexeme = yytext(); return PALABRA_RESERVADA_IMPLEMENTS;
          }
        case 103: break;
        case 28: 
          { lexeme = yytext(); return PALABRA_RESERVADA_IF;
          }
        case 104: break;
        case 31: 
          { return OPERADOR_DISTINTO;
          }
        case 105: break;
        case 51: 
          { return OPERADOR_ASIGNACION_DESPLAZAMIENTO_DERECHA;
          }
        case 106: break;
        case 63: 
          { return COMENTARIO;
          }
        case 107: break;
        case 33: 
          { return OPERADOR_MAYOR_IGUAL_QUE;
          }
        case 108: break;
        case 69: 
          { lexeme = yytext(); return PALABRA_RESERVADA_WHILE;
          }
        case 109: break;
        case 41: 
          { return OPERADOR_DESPLAZAMIENTO_IZQUIERDA;
          }
        case 110: break;
        case 83: 
          { lexeme = yytext(); return PALABRA_RESERVADA_INTERFACE;
          }
        case 111: break;
        case 71: 
          { lexeme = yytext(); return PALABRA_RESERVADA_CONST;
          }
        case 112: break;
        case 40: 
          { return OPERADOR_MENOR_IGUAL_QUE;
          }
        case 113: break;
        case 14: 
          { return OPERADOR_DIVISION;
          }
        case 114: break;
        case 18: 
          { return OPERADOR_PARENTESIS_CERRAR;
          }
        case 115: break;
        case 16: 
          { return OPERADOR_MENOR_QUE;
          }
        case 116: break;
        case 27: 
          { lexeme = yytext(); return LITERAL_STRING;
          }
        case 117: break;
        case 80: 
          { lexeme = yytext(); return PALABRA_RESERVADA_BOOLEAN;
          }
        case 118: break;
        case 79: 
          { lexeme = yytext(); return PALABRA_RESERVADA_PRIVATE;
          }
        case 119: break;
        case 4: 
          { return OPERADOR_SUSTRACCION;
          }
        case 120: break;
        case 7: 
          { return COMILLA_DOBLE;
          }
        case 121: break;
        case 74: 
          { lexeme = yytext(); return PALABRA_RESERVADA_STATIC;
          }
        case 122: break;
        case 81: 
          { lexeme = yytext(); return PALABRA_RESERVADA_OVERRIDE;
          }
        case 123: break;
        case 30: 
          { lexeme = yytext(); return OPERADOR_OR;
          }
        case 124: break;
        case 53: 
          { lexeme = yytext(); return PALABRA_RESERVADA_ELSE;
          }
        case 125: break;
        case 42: 
          { lexeme = yytext(); return LITERAL_NUM_FLOTANTE;
          }
        case 126: break;
        case 46: 
          { lexeme = yytext(); return PALABRA_RESERVADA_NEW;
          }
        case 127: break;
        case 52: 
          { return OPERADOR_ASIGNACION_DESPLAZAMIENTO_IZQUIERDA;
          }
        case 128: break;
        case 8: 
          { lexeme = yytext(); return OPERADOR_NOT;
          }
        case 129: break;
        case 22: 
          { return OPERADOR_LLAVE_CERRAR;
          }
        case 130: break;
        case 12: 
          { return OPERADOR_ADICION;
          }
        case 131: break;
        case 24: 
          { return OPERADOR_FLECHA;
          }
        case 132: break;
        case 68: 
          { lexeme = yytext(); return PALABRA_RESERVADA_SUPER;
          }
        case 133: break;
        case 39: 
          { return OPERADOR_IGUAL;
          }
        case 134: break;
        case 5: 
          { return COMILLA_SIMPLE;
          }
        case 135: break;
        case 44: 
          { lexeme = yytext(); return PALABRA_RESERVADA_INT;
          }
        case 136: break;
        case 72: 
          { lexeme = yytext(); return PALABRA_RESERVADA_CATCH;
          }
        case 137: break;
        case 59: 
          { lexeme = yytext(); return PALABRA_RESERVADA_THIS;
          }
        case 138: break;
        case 13: 
          { return OPERADOR_MULTIPLICACION;
          }
        case 139: break;
        case 19: 
          { return OPERADOR_CORCHETE_ABRIR;
          }
        case 140: break;
        case 49: 
          { lexeme = yytext(); return PALABRA_RESERVADA_VAL;
          }
        case 141: break;
        case 50: 
          { lexeme = yytext(); return PALABRA_RESERVADA_VAR;
          }
        case 142: break;
        case 61: 
          { lexeme = yytext(); return PALABRA_RESERVADA_LIST;
          }
        case 143: break;
        case 78: 
          { lexeme = yytext(); return PALABRA_RESERVADA_EXTENDS;
          }
        case 144: break;
        case 37: 
          { /* Comentario de línea - ignorar */ return COMENTARIO;
          }
        case 145: break;
        case 9: 
          { return OPERADOR_MAYOR_QUE;
          }
        case 146: break;
        case 38: 
          { return OPERADOR_ASIGNACION_DIVISION;
          }
        case 147: break;
        case 25: 
          { return OPERADOR_ASIGNACION_SUSTRACCION;
          }
        case 148: break;
        case 70: 
          { lexeme = yytext(); return PALABRA_RESERVADA_CLASS;
          }
        case 149: break;
        case 48: 
          { lexeme = yytext(); return PALABRA_RESERVADA_MAP;
          }
        case 150: break;
        case 77: 
          { lexeme = yytext(); return PALABRA_RESERVADA_PUBLIC;
          }
        case 151: break;
        case 75: 
          { lexeme = yytext(); return PALABRA_RESERVADA_RETURN;
          }
        case 152: break;
        case 35: 
          { return OPERADOR_ASIGNACION_ADICION;
          }
        case 153: break;
        case 58: 
          { lexeme = yytext(); return PALABRA_RESERVADA_TRUE;
          }
        case 154: break;
        case 34: 
          { return OPERADOR_INCREMENTO;
          }
        case 155: break;
        case 45: 
          { lexeme = yytext(); return PALABRA_RESERVADA_FOR;
          }
        case 156: break;
        case 29: 
          { lexeme = yytext(); return OPERADOR_AND;
          }
        case 157: break;
        case 64: 
          { lexeme = yytext(); return PALABRA_RESERVADA_FINAL;
          }
        case 158: break;
        case 17: 
          { return OPERADOR_PARENTESIS_ABRIR;
          }
        case 159: break;
        case 82: 
          { lexeme = yytext(); return PALABRA_RESERVADA_ABSTRACT;
          }
        case 160: break;
        case 66: 
          { lexeme = yytext(); return PALABRA_RESERVADA_FALSE;
          }
        case 161: break;
        case 62: 
          { lexeme = yytext(); return PALABRA_RESERVADA_VOID;
          }
        case 162: break;
        case 21: 
          { return OPERADOR_LLAVE_ABRIR;
          }
        case 163: break;
        case 20: 
          { return OPERADOR_CORCHETE_CERRAR;
          }
        case 164: break;
        case 3: 
          { lexeme = yytext(); return LITERAL_NUM_ENTERO;
          }
        case 165: break;
        case 47: 
          { lexeme = yytext(); return PALABRA_RESERVADA_TRY;
          }
        case 166: break;
        case 6: 
          { /* ignorar espacios */
          }
        case 167: break;
        case 65: 
          { lexeme = yytext(); return PALABRA_RESERVADA_FLOAT;
          }
        case 168: break;
        case 56: 
          { lexeme = yytext(); return PALABRA_RESERVADA_WHEN;
          }
        case 169: break;
        case 15: 
          { return OPERADOR_ASIGNACION;
          }
        case 170: break;
        case 84: 
          { lexeme = yytext(); return PALABRA_RESERVADA_ARRAYLIST;
          }
        case 171: break;
        case 11: 
          { return PUNTO_Y_COMA;
          }
        case 172: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return null; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

    @Override
    public Symbol next_token() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }


}
