
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 18 09:59:37 GMT-05:00 2025
//----------------------------------------------------

package compi;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 18 09:59:37 GMT-05:00 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\014\004\000\002\013\003\000\002\013\003" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\110\002\000\002\007\013\000\002" +
    "\003\002\000\002\003\003\000\002\011\003\000\002\011" +
    "\004\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\004\002\000\002\004\004\000\002" +
    "\005\002\000\002\005\004\000\002\006\003\000\002\006" +
    "\005\000\002\010\002\000\002\010\003\000\002\017\003" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\073\011\000\002\074\003\000\002" +
    "\074\004\000\002\075\005\000\002\076\003\000\002\100" +
    "\005\000\002\021\006\000\002\021\010\000\002\111\002" +
    "\000\002\022\012\000\002\112\002\000\002\022\012\000" +
    "\002\025\002\000\002\025\003\000\002\026\003\000\002" +
    "\026\005\000\002\027\004\000\002\027\007\000\002\023" +
    "\010\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\055\004\000\002\055\005\000\002" +
    "\030\003\000\002\030\004\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\107\010\000\002" +
    "\107\006\000\002\107\006\000\002\031\005\000\002\032" +
    "\003\000\002\032\004\000\002\033\006\000\002\050\005" +
    "\000\002\050\007\000\002\050\006\000\002\050\010\000" +
    "\002\050\012\000\002\050\013\000\002\103\003\000\002" +
    "\103\003\000\002\102\005\000\002\102\005\000\002\102" +
    "\005\000\002\102\005\000\002\102\005\000\002\102\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\105\005\000\002" +
    "\105\005\000\002\105\004\000\002\105\004\000\002\105" +
    "\003\000\002\105\003\000\002\105\005\000\002\105\003" +
    "\000\002\106\005\000\002\106\005\000\002\106\005\000" +
    "\002\106\005\000\002\106\005\000\002\106\005\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\053\006\000" +
    "\002\053\006\000\002\053\006\000\002\053\006\000\002" +
    "\053\006\000\002\053\005\000\002\053\005\000\002\053" +
    "\006\000\002\042\010\000\002\070\003\000\002\043\002" +
    "\000\002\043\004\000\002\045\007\000\002\046\013\000" +
    "\002\046\012\000\002\061\002\000\002\061\004\000\002" +
    "\061\006\000\002\061\005\000\002\062\002\000\002\062" +
    "\003\000\002\062\004\000\002\062\004\000\002\062\004" +
    "\000\002\062\004\000\002\047\004\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\024\031\ufff5\034\023\035\014\043\007\044" +
    "\013\045\020\046\006\047\010\054\022\001\002\000\004" +
    "\002\u0125\001\002\000\004\031\034\001\002\000\044\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\023\uffee\027\uffee\030\uffee" +
    "\031\uffee\034\uffee\035\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\051\uffee\123\uffee\001\002\000\044\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\023\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\034\ufff1\035\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\051\ufff1\123\ufff1\001\002\000\044\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\023\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\034\uffeb\035\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\051\uffeb\123\uffeb\001\002\000\044\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\023\ufff3\027\ufff3\030\ufff3\031\ufff3\034" +
    "\ufff3\035\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\051\ufff3\123\ufff3\001\002\000\026\002\ufffc\031\ufffc\034" +
    "\ufffc\035\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\054\ufffc\001\002\000\044\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\023\ufff0\027\ufff0\030\ufff0\031\ufff0\034\ufff0\035\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\123" +
    "\ufff0\001\002\000\044\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\023\uffed\027\uffed\030\uffed\031\uffed\034\uffed\035\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed\123\uffed" +
    "\001\002\000\044\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\034\023\035\014\043\007" +
    "\044\013\045\020\046\006\047\010\051\ufff4\123\ufff4\001" +
    "\002\000\026\002\uffff\031\uffff\034\uffff\035\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\054\uffff\001\002\000" +
    "\026\002\000\031\ufff5\034\023\035\014\043\007\044\013" +
    "\045\020\046\006\047\010\054\022\001\002\000\044\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\023\uffef\027\uffef\030\uffef" +
    "\031\uffef\034\uffef\035\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\051\uffef\123\uffef\001\002\000\026\002\ufffd" +
    "\031\ufffd\034\ufffd\035\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\054\ufffd\001\002\000\004\123\025\001\002" +
    "\000\044\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec\027" +
    "\uffec\030\uffec\031\uffec\034\uffec\035\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\051\uffec\123\uffec\001\002\000" +
    "\006\117\027\120\026\001\002\000\006\117\ufffa\120\ufffa" +
    "\001\002\000\006\065\030\123\031\001\002\000\026\002" +
    "\ufffb\031\ufffb\034\ufffb\035\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\054\ufffb\001\002\000\006\117\ufff8\120" +
    "\ufff8\001\002\000\006\117\ufff9\120\ufff9\001\002\000\026" +
    "\002\ufffe\031\ufffe\034\ufffe\035\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\054\ufffe\001\002\000\044\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\023\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\034\ufff2\035\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\051\ufff2\123\ufff2\001\002\000\004\123\035\001" +
    "\002\000\010\036\ufff7\037\ufff7\114\ufff7\001\002\000\010" +
    "\036\040\037\uffea\114\uffea\001\002\000\006\037\042\114" +
    "\uffe8\001\002\000\004\123\041\001\002\000\006\037\uffe9" +
    "\114\uffe9\001\002\000\004\123\u0122\001\002\000\004\114" +
    "\044\001\002\000\044\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\023\ufff5\027\ufff5\030\ufff5\034\023\035\014\043\007\044" +
    "\013\045\020\046\006\047\010\051\ufff5\115\uffe4\123\ufff5" +
    "\001\002\000\024\016\057\017\062\020\060\021\063\023" +
    "\061\027\056\030\065\051\066\123\067\001\002\000\044" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\027\ufff5\030" +
    "\ufff5\034\023\035\014\043\007\044\013\045\020\046\006" +
    "\047\010\051\ufff5\115\uffe3\123\ufff5\001\002\000\044\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\027\uffe0\030\uffe0" +
    "\034\uffe0\035\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\051\uffe0\115\uffe0\123\uffe0\001\002\000\044\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\023\uffde\027\uffde\030\uffde\034" +
    "\uffde\035\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\051\uffde\115\uffde\123\uffde\001\002\000\044\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\023\uffdf\027\uffdf\030\uffdf\034\uffdf" +
    "\035\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051" +
    "\uffdf\115\uffdf\123\uffdf\001\002\000\004\115\054\001\002" +
    "\000\044\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\027" +
    "\uffe2\030\uffe2\034\uffe2\035\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\051\uffe2\115\uffe2\123\uffe2\001\002\000" +
    "\026\002\ufff6\031\ufff6\034\ufff6\035\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\054\ufff6\001\002\000\044\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\027\uffe1\030\uffe1" +
    "\034\uffe1\035\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\051\uffe1\115\uffe1\123\uffe1\001\002\000\010\071\uffc4" +
    "\116\uffc4\123\uffc4\001\002\000\010\071\uffca\116\uffca\123" +
    "\uffca\001\002\000\010\071\uffc6\116\uffc6\123\uffc6\001\002" +
    "\000\010\071\uffc9\116\uffc9\123\uffc9\001\002\000\010\071" +
    "\uffc7\116\uffc7\123\uffc7\001\002\000\010\071\uffc5\116\uffc5" +
    "\123\uffc5\001\002\000\004\123\u0117\001\002\000\010\071" +
    "\uffc8\116\uffc8\123\uffc8\001\002\000\004\123\u0111\001\002" +
    "\000\004\110\070\001\002\000\022\016\057\017\062\020" +
    "\060\021\063\023\061\027\056\030\065\111\uffd1\001\002" +
    "\000\006\111\uffcf\116\uffcf\001\002\000\004\123\u010d\001" +
    "\002\000\004\111\077\001\002\000\006\111\uffd0\116\075" +
    "\001\002\000\020\016\057\017\062\020\060\021\063\023" +
    "\061\027\056\030\065\001\002\000\006\111\uffce\116\uffce" +
    "\001\002\000\004\114\100\001\002\000\052\004\122\006" +
    "\126\007\102\010\127\016\057\017\062\020\060\021\063" +
    "\023\061\024\112\025\105\026\131\027\056\030\065\050" +
    "\133\052\111\057\121\114\100\115\115\123\124\001\002" +
    "\000\044\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\027" +
    "\uffcb\030\uffcb\034\uffcb\035\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\115\uffcb\123\uffcb\001\002\000" +
    "\004\110\u0109\001\002\000\004\123\u0104\001\002\000\052" +
    "\004\122\006\126\007\102\010\127\016\057\017\062\020" +
    "\060\021\063\023\061\024\112\025\105\026\131\027\056" +
    "\030\065\050\133\052\111\057\121\114\100\115\u0102\123" +
    "\124\001\002\000\004\072\377\001\002\000\052\004\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\050\uffbd\052\uffbd\057\uffbd\114\uffbd\115\uffbd\123\uffbd\001" +
    "\002\000\052\004\uffb6\006\uffb6\007\uffb6\010\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\050\uffb6\052\uffb6\057\uffb6\114\uffb6" +
    "\115\uffb6\123\uffb6\001\002\000\052\004\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\050\uffb7\052" +
    "\uffb7\057\uffb7\114\uffb7\115\uffb7\123\uffb7\001\002\000\004" +
    "\114\100\001\002\000\004\072\364\001\002\000\004\123" +
    "\355\001\002\000\052\004\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\050\uffb9\052\uffb9\057\uffb9" +
    "\114\uffb9\115\uffb9\123\uffb9\001\002\000\116\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\034\uffc3\035\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\057\uffc3\060\uffc3\110\uffc3\114\uffc3\115\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\127\uffc3\001\002\000\052\004" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\050\uffc1\052\uffc1\057\uffc1\114\uffc1\115\uffc1\123\uffc1" +
    "\001\002\000\052\004\uffbf\006\uffbf\007\uffbf\010\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\050\uffbf\052\uffbf\057\uffbf\114" +
    "\uffbf\115\uffbf\123\uffbf\001\002\000\052\004\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\050\uffbb" +
    "\052\uffbb\057\uffbb\114\uffbb\115\uffbb\123\uffbb\001\002\000" +
    "\026\016\057\017\062\020\060\021\063\023\061\024\112" +
    "\025\105\026\131\027\056\030\065\001\002\000\004\110" +
    "\327\001\002\000\052\004\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\050\uffbe\052\uffbe\057\uffbe" +
    "\114\uffbe\115\uffbe\123\uffbe\001\002\000\020\067\307\070" +
    "\310\077\304\100\306\101\303\102\302\103\305\001\002" +
    "\000\052\004\uffbc\006\uffbc\007\uffbc\010\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\050\uffbc\052\uffbc\057\uffbc\114\uffbc\115" +
    "\uffbc\123\uffbc\001\002\000\004\110\247\001\002\000\004" +
    "\110\230\001\002\000\052\004\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\050\uffb8\052\uffb8\057" +
    "\uffb8\114\uffb8\115\uffb8\123\uffb8\001\002\000\004\072\223" +
    "\001\002\000\052\004\uffba\006\uffba\007\uffba\010\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\050\uffba\052\uffba\057\uffba\114" +
    "\uffba\115\uffba\123\uffba\001\002\000\026\011\150\012\136" +
    "\015\135\060\151\110\141\117\140\123\153\124\142\125" +
    "\152\127\144\001\002\000\016\013\174\014\175\061\uffa8" +
    "\062\uffa8\111\uffa8\117\uffa8\001\002\000\020\011\150\012" +
    "\136\015\135\110\200\123\222\124\201\125\202\001\002" +
    "\000\016\013\uff96\014\uff96\061\uff96\062\uff96\111\uff96\117" +
    "\uff96\001\002\000\016\071\206\072\207\073\211\074\210" +
    "\075\205\076\212\001\002\000\052\004\uff6b\006\uff6b\007" +
    "\uff6b\010\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\050\uff6b\052" +
    "\uff6b\057\uff6b\114\uff6b\115\uff6b\123\uff6b\001\002\000\024" +
    "\011\150\012\136\015\135\060\151\110\141\123\153\124" +
    "\142\125\152\127\144\001\002\000\036\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\071\uff8c\072\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\111\uff9f\117\uff9f\001\002" +
    "\000\016\013\uff94\014\uff94\061\uff94\062\uff94\111\uff94\117" +
    "\uff94\001\002\000\022\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\111\uff9d\117\uff9d\001\002\000\022\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\111\uffa1" +
    "\117\uffa1\001\002\000\004\117\172\001\002\000\022\061" +
    "\uffa7\062\uffa7\063\155\064\157\065\154\066\156\111\uffa7" +
    "\117\uffa7\001\002\000\016\013\uff97\014\uff97\061\uff97\062" +
    "\uff97\111\uff97\117\uff97\001\002\000\022\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\111\uff9c\117\uff9c\001" +
    "\002\000\036\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076" +
    "\uff8b\111\uff9e\117\uff9e\001\002\000\036\061\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\066\uffa0\071\uff8d\072\uff8d\073" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\111\uffa0\117\uffa0\001\002" +
    "\000\016\060\151\110\164\123\160\124\163\125\161\127" +
    "\144\001\002\000\016\060\151\110\164\123\160\124\163" +
    "\125\161\127\144\001\002\000\016\060\151\110\164\123" +
    "\160\124\163\125\161\127\144\001\002\000\016\060\151" +
    "\110\164\123\160\124\163\125\161\127\144\001\002\000" +
    "\022\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\111\uffa0\117\uffa0\001\002\000\022\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\111\uff9e\117\uff9e\001\002" +
    "\000\022\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\154\066" +
    "\156\111\uffa5\117\uffa5\001\002\000\022\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\111\uff9f\117\uff9f\001" +
    "\002\000\016\060\151\110\164\123\160\124\163\125\161" +
    "\127\144\001\002\000\014\063\155\064\157\065\154\066" +
    "\156\111\166\001\002\000\022\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\111\uffa2\117\uffa2\001\002\000" +
    "\022\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\111\uffa3\117\uffa3\001\002\000\022\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\154\066\156\111\uffa6\117\uffa6\001\002" +
    "\000\022\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\111\uffa4\117\uffa4\001\002\000\052\004\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\023" +
    "\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\050\uff6a" +
    "\052\uff6a\057\uff6a\114\uff6a\115\uff6a\123\uff6a\001\002\000" +
    "\010\013\174\014\175\111\176\001\002\000\020\011\150" +
    "\012\136\015\135\110\200\123\203\124\201\125\202\001" +
    "\002\000\020\011\150\012\136\015\135\110\200\123\203" +
    "\124\201\125\202\001\002\000\016\013\uff95\014\uff95\061" +
    "\uff95\062\uff95\111\uff95\117\uff95\001\002\000\016\013\174" +
    "\014\uff9a\061\uff9a\062\uff9a\111\uff9a\117\uff9a\001\002\000" +
    "\020\011\150\012\136\015\135\110\200\123\203\124\201" +
    "\125\202\001\002\000\032\013\uff8c\014\uff8c\061\uff8c\062" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c" +
    "\111\uff8c\117\uff8c\001\002\000\032\013\uff8b\014\uff8b\061" +
    "\uff8b\062\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b" +
    "\076\uff8b\111\uff8b\117\uff8b\001\002\000\032\013\uff8d\014" +
    "\uff8d\061\uff8d\062\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d" +
    "\075\uff8d\076\uff8d\111\uff8d\117\uff8d\001\002\000\016\013" +
    "\uff9b\014\uff9b\061\uff9b\062\uff9b\111\uff9b\117\uff9b\001\002" +
    "\000\010\123\203\124\201\125\202\001\002\000\010\123" +
    "\203\124\201\125\202\001\002\000\010\123\203\124\201" +
    "\125\202\001\002\000\010\123\203\124\201\125\202\001" +
    "\002\000\010\123\203\124\201\125\202\001\002\000\010" +
    "\123\203\124\201\125\202\001\002\000\016\013\uff8e\014" +
    "\uff8e\061\uff8e\062\uff8e\111\uff8e\117\uff8e\001\002\000\016" +
    "\013\uff91\014\uff91\061\uff91\062\uff91\111\uff91\117\uff91\001" +
    "\002\000\016\013\uff90\014\uff90\061\uff90\062\uff90\111\uff90" +
    "\117\uff90\001\002\000\016\013\uff92\014\uff92\061\uff92\062" +
    "\uff92\111\uff92\117\uff92\001\002\000\016\013\uff93\014\uff93" +
    "\061\uff93\062\uff93\111\uff93\117\uff93\001\002\000\016\013" +
    "\uff8f\014\uff8f\061\uff8f\062\uff8f\111\uff8f\117\uff8f\001\002" +
    "\000\016\013\uff99\014\uff99\061\uff99\062\uff99\111\uff99\117" +
    "\uff99\001\002\000\032\013\uff98\014\uff98\061\uff98\062\uff98" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\111" +
    "\uff98\117\uff98\001\002\000\020\016\057\017\062\020\060" +
    "\021\063\023\061\027\056\030\065\001\002\000\004\116" +
    "\225\001\002\000\020\016\057\017\062\020\060\021\063" +
    "\023\061\027\056\030\065\001\002\000\004\071\227\001" +
    "\002\000\006\110\uffb5\123\uffb5\001\002\000\024\011\150" +
    "\012\136\015\135\060\151\110\141\123\153\124\142\125" +
    "\152\127\144\001\002\000\004\111\232\001\002\000\004" +
    "\114\233\001\002\000\024\011\150\012\136\015\135\060" +
    "\151\110\141\123\153\124\142\125\152\127\144\001\002" +
    "\000\026\011\150\012\136\015\135\060\151\110\141\115" +
    "\246\123\153\124\142\125\152\127\144\001\002\000\004" +
    "\062\243\001\002\000\004\061\uffd9\001\002\000\026\011" +
    "\uffdc\012\uffdc\015\uffdc\060\uffdc\110\uffdc\115\uffdc\123\uffdc" +
    "\124\uffdc\125\uffdc\127\uffdc\001\002\000\004\061\241\001" +
    "\002\000\004\114\100\001\002\000\026\011\uffda\012\uffda" +
    "\015\uffda\060\uffda\110\uffda\115\uffda\123\uffda\124\uffda\125" +
    "\uffda\127\uffda\001\002\000\024\011\150\012\136\015\135" +
    "\060\151\110\141\123\153\124\142\125\152\127\144\001" +
    "\002\000\004\061\uffd8\001\002\000\026\011\uffdb\012\uffdb" +
    "\015\uffdb\060\uffdb\110\uffdb\115\uffdb\123\uffdb\124\uffdb\125" +
    "\uffdb\127\uffdb\001\002\000\052\004\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\050\uffdd\052\uffdd" +
    "\057\uffdd\114\uffdd\115\uffdd\123\uffdd\001\002\000\024\016" +
    "\057\017\062\020\060\021\063\023\061\027\056\030\065" +
    "\117\uff75\123\252\001\002\000\004\123\273\001\002\000" +
    "\004\117\255\001\002\000\004\077\253\001\002\000\024" +
    "\011\150\012\136\015\135\060\151\110\141\123\153\124" +
    "\142\125\152\127\144\001\002\000\004\117\uff72\001\002" +
    "\000\024\011\150\012\136\015\135\060\151\110\141\123" +
    "\153\124\142\125\152\127\144\001\002\000\004\117\257" +
    "\001\002\000\032\011\150\012\136\015\135\060\151\067" +
    "\262\070\263\110\141\111\uff71\123\264\124\142\125\152" +
    "\127\144\001\002\000\004\111\271\001\002\000\004\111" +
    "\uff70\001\002\000\004\123\270\001\002\000\004\123\267" +
    "\001\002\000\034\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\265\070\266\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\111\uffa0\001\002\000\004\111\uff6f\001\002\000" +
    "\004\111\uff6e\001\002\000\004\111\uff6c\001\002\000\004" +
    "\111\uff6d\001\002\000\050\004\122\006\126\007\102\010" +
    "\127\016\057\017\062\020\060\021\063\023\061\024\112" +
    "\025\105\026\131\027\056\030\065\050\133\052\111\057" +
    "\121\114\100\123\124\001\002\000\052\004\uff77\006\uff77" +
    "\007\uff77\010\uff77\016\uff77\017\uff77\020\uff77\021\uff77\023" +
    "\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\050\uff77" +
    "\052\uff77\057\uff77\114\uff77\115\uff77\123\uff77\001\002\000" +
    "\010\062\274\077\275\117\uff74\001\002\000\024\011\150" +
    "\012\136\015\135\060\151\110\141\123\153\124\142\125" +
    "\152\127\144\001\002\000\024\011\150\012\136\015\135" +
    "\060\151\110\141\123\153\124\142\125\152\127\144\001" +
    "\002\000\004\117\uff73\001\002\000\004\111\300\001\002" +
    "\000\004\114\100\001\002\000\052\004\uff76\006\uff76\007" +
    "\uff76\010\uff76\016\uff76\017\uff76\020\uff76\021\uff76\023\uff76" +
    "\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\050\uff76\052" +
    "\uff76\057\uff76\114\uff76\115\uff76\123\uff76\001\002\000\024" +
    "\011\150\012\136\015\135\060\151\110\141\123\153\124" +
    "\142\125\152\127\144\001\002\000\024\011\150\012\136" +
    "\015\135\060\151\110\141\123\153\124\142\125\152\127" +
    "\144\001\002\000\024\011\150\012\136\015\135\060\151" +
    "\110\141\123\153\124\142\125\152\127\144\001\002\000" +
    "\024\011\150\012\136\015\135\060\151\110\141\123\153" +
    "\124\142\125\152\127\144\001\002\000\024\011\150\012" +
    "\136\015\135\060\151\110\141\123\153\124\142\125\152" +
    "\127\144\001\002\000\004\117\312\001\002\000\004\117" +
    "\311\001\002\000\052\004\uff7e\006\uff7e\007\uff7e\010\uff7e" +
    "\016\uff7e\017\uff7e\020\uff7e\021\uff7e\023\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\027\uff7e\030\uff7e\050\uff7e\052\uff7e\057\uff7e" +
    "\114\uff7e\115\uff7e\123\uff7e\001\002\000\052\004\uff7f\006" +
    "\uff7f\007\uff7f\010\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\050" +
    "\uff7f\052\uff7f\057\uff7f\114\uff7f\115\uff7f\123\uff7f\001\002" +
    "\000\004\117\314\001\002\000\052\004\uff81\006\uff81\007" +
    "\uff81\010\uff81\016\uff81\017\uff81\020\uff81\021\uff81\023\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\050\uff81\052" +
    "\uff81\057\uff81\114\uff81\115\uff81\123\uff81\001\002\000\004" +
    "\117\316\001\002\000\052\004\uff82\006\uff82\007\uff82\010" +
    "\uff82\016\uff82\017\uff82\020\uff82\021\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\050\uff82\052\uff82\057" +
    "\uff82\114\uff82\115\uff82\123\uff82\001\002\000\004\117\322" +
    "\001\002\000\004\117\321\001\002\000\052\004\uff7d\006" +
    "\uff7d\007\uff7d\010\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\050" +
    "\uff7d\052\uff7d\057\uff7d\114\uff7d\115\uff7d\123\uff7d\001\002" +
    "\000\052\004\uff84\006\uff84\007\uff84\010\uff84\016\uff84\017" +
    "\uff84\020\uff84\021\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\050\uff84\052\uff84\057\uff84\114\uff84\115" +
    "\uff84\123\uff84\001\002\000\004\117\324\001\002\000\052" +
    "\004\uff80\006\uff80\007\uff80\010\uff80\016\uff80\017\uff80\020" +
    "\uff80\021\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\050\uff80\052\uff80\057\uff80\114\uff80\115\uff80\123" +
    "\uff80\001\002\000\004\117\326\001\002\000\052\004\uff83" +
    "\006\uff83\007\uff83\010\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83" +
    "\050\uff83\052\uff83\057\uff83\114\uff83\115\uff83\123\uff83\001" +
    "\002\000\020\011\150\012\136\015\135\110\200\123\203" +
    "\124\201\125\202\001\002\000\010\013\174\014\175\111" +
    "\uff7b\001\002\000\004\111\332\001\002\000\004\114\100" +
    "\001\002\000\054\004\uff7a\005\335\006\uff7a\007\uff7a\010" +
    "\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\023\uff7a\024\uff7a" +
    "\025\uff7a\026\uff7a\027\uff7a\030\uff7a\050\uff7a\052\uff7a\057" +
    "\uff7a\114\uff7a\115\uff7a\123\uff7a\001\002\000\052\004\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\016\uff7c\017\uff7c\020\uff7c\021" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c" +
    "\050\uff7c\052\uff7c\057\uff7c\114\uff7c\115\uff7c\123\uff7c\001" +
    "\002\000\004\114\100\001\002\000\052\004\uff79\006\uff79" +
    "\007\uff79\010\uff79\016\uff79\017\uff79\020\uff79\021\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\050\uff79" +
    "\052\uff79\057\uff79\114\uff79\115\uff79\123\uff79\001\002\000" +
    "\004\123\350\001\002\000\004\123\341\001\002\000\004" +
    "\077\342\001\002\000\004\042\343\001\002\000\010\024" +
    "\112\025\105\026\131\001\002\000\004\110\345\001\002" +
    "\000\004\111\346\001\002\000\004\117\347\001\002\000" +
    "\052\004\uffa9\006\uffa9\007\uffa9\010\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\050\uffa9\052\uffa9\057\uffa9\114\uffa9\115\uffa9" +
    "\123\uffa9\001\002\000\006\077\351\117\352\001\002\000" +
    "\024\011\150\012\136\015\135\060\151\110\141\123\153" +
    "\124\142\125\152\127\144\001\002\000\052\004\uffac\006" +
    "\uffac\007\uffac\010\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\050" +
    "\uffac\052\uffac\057\uffac\114\uffac\115\uffac\123\uffac\001\002" +
    "\000\004\117\354\001\002\000\052\004\uffab\006\uffab\007" +
    "\uffab\010\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\050\uffab\052" +
    "\uffab\057\uffab\114\uffab\115\uffab\123\uffab\001\002\000\004" +
    "\077\356\001\002\000\004\042\357\001\002\000\010\024" +
    "\112\025\105\026\131\001\002\000\004\110\361\001\002" +
    "\000\004\111\362\001\002\000\004\117\363\001\002\000" +
    "\052\004\uffaa\006\uffaa\007\uffaa\010\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\050\uffaa\052\uffaa\057\uffaa\114\uffaa\115\uffaa" +
    "\123\uffaa\001\002\000\020\016\057\017\062\020\060\021" +
    "\063\023\061\027\056\030\065\001\002\000\004\071\366" +
    "\001\002\000\006\110\uffb4\123\uffb4\001\002\000\004\053" +
    "\370\001\002\000\004\110\374\001\002\000\054\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\050\uffb2\052\uffb2\053\370\057\uffb2\114\uffb2\115\uffb2\123" +
    "\uffb2\001\002\000\054\004\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\050\uffb1\052\uffb1\053\uffb1" +
    "\057\uffb1\114\uffb1\115\uffb1\123\uffb1\001\002\000\054\004" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\050\uffb0\052\uffb0\053\uffb0\057\uffb0\114\uffb0\115\uffb0" +
    "\123\uffb0\001\002\000\004\111\375\001\002\000\004\114" +
    "\100\001\002\000\054\004\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\050\uffaf\052\uffaf\053\uffaf" +
    "\057\uffaf\114\uffaf\115\uffaf\123\uffaf\001\002\000\020\016" +
    "\057\017\062\020\060\021\063\023\061\027\056\030\065" +
    "\001\002\000\004\071\u0101\001\002\000\006\110\uffb3\123" +
    "\uffb3\001\002\000\116\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\034\uffc2\035\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\057\uffc2" +
    "\060\uffc2\110\uffc2\114\uffc2\115\uffc2\123\uffc2\124\uffc2\125" +
    "\uffc2\127\uffc2\001\002\000\052\004\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\050\uffc0\052\uffc0" +
    "\057\uffc0\114\uffc0\115\uffc0\123\uffc0\001\002\000\006\077" +
    "\u0105\117\u0106\001\002\000\024\011\150\012\136\015\135" +
    "\060\151\110\141\123\153\124\142\125\152\127\144\001" +
    "\002\000\052\004\uffae\006\uffae\007\uffae\010\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\050\uffae\052\uffae\057\uffae\114\uffae" +
    "\115\uffae\123\uffae\001\002\000\004\117\u0108\001\002\000" +
    "\052\004\uffad\006\uffad\007\uffad\010\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\050\uffad\052\uffad\057\uffad\114\uffad\115\uffad" +
    "\123\uffad\001\002\000\024\011\150\012\136\015\135\060" +
    "\151\110\141\123\153\124\142\125\152\127\144\001\002" +
    "\000\004\111\u010b\001\002\000\004\114\100\001\002\000" +
    "\052\004\uff78\006\uff78\007\uff78\010\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\050\uff78\052\uff78\057\uff78\114\uff78\115\uff78" +
    "\123\uff78\001\002\000\010\077\u010e\111\uffcd\116\uffcd\001" +
    "\002\000\024\011\150\012\136\015\135\060\151\110\141" +
    "\123\153\124\142\125\152\127\144\001\002\000\004\117" +
    "\u0110\001\002\000\006\111\uffcc\116\uffcc\001\002\000\004" +
    "\110\uffd3\001\002\000\004\110\u0113\001\002\000\022\016" +
    "\057\017\062\020\060\021\063\023\061\027\056\030\065" +
    "\111\uffd1\001\002\000\004\111\u0115\001\002\000\004\114" +
    "\100\001\002\000\044\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\023\uffd2\027\uffd2\030\uffd2\034\uffd2\035\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\115\uffd2\123\uffd2" +
    "\001\002\000\010\077\u0119\110\uffd5\117\u011a\001\002\000" +
    "\004\110\u011d\001\002\000\024\011\150\012\136\015\135" +
    "\060\151\110\141\123\153\124\142\125\152\127\144\001" +
    "\002\000\044\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\027\uffd7\030\uffd7\034\uffd7\035\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\051\uffd7\115\uffd7\123\uffd7\001\002" +
    "\000\004\117\u011c\001\002\000\044\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\027\uffd6\030\uffd6\034\uffd6\035\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\115" +
    "\uffd6\123\uffd6\001\002\000\022\016\057\017\062\020\060" +
    "\021\063\023\061\027\056\030\065\111\uffd1\001\002\000" +
    "\004\111\u011f\001\002\000\004\114\100\001\002\000\044" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\027\uffd4\030" +
    "\uffd4\034\uffd4\035\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\051\uffd4\115\uffd4\123\uffd4\001\002\000\006\114" +
    "\uffe7\116\u0123\001\002\000\006\114\uffe6\116\uffe6\001\002" +
    "\000\004\123\u0124\001\002\000\006\114\uffe5\116\uffe5\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\022\002\003\003\004\007\011\011\014\012" +
    "\010\013\015\014\016\015\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\032\001\001\000" +
    "\002\001\001\000\016\003\004\007\011\011\014\012\010" +
    "\013\031\015\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\035\001" +
    "\001\000\004\004\036\001\001\000\004\005\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0120\001" +
    "\001\000\002\001\001\000\024\003\044\010\051\011\014" +
    "\012\010\017\045\020\052\021\046\022\050\023\047\001" +
    "\001\000\004\024\063\001\001\000\020\003\044\011\014" +
    "\012\010\020\054\021\046\022\050\023\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\071\025\072\026\073\027\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\071\027\075\001\001\000" +
    "\002\001\001\000\004\055\100\001\001\000\036\024\102" +
    "\030\103\031\127\042\105\044\115\045\124\046\117\047" +
    "\131\050\116\053\122\055\106\060\113\073\107\107\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\024\102\031\127\042\105\044\u0102\045\124" +
    "\046\117\047\131\050\116\053\122\055\106\060\113\073" +
    "\107\107\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\336\107\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\101\144\102" +
    "\146\103\145\104\136\105\133\106\142\001\001\000\002" +
    "\001\001\000\010\104\136\105\220\106\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\101\144\102\164\104\136\105\172\106\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\101\144\102\170\001\001\000\006\101\144\102" +
    "\167\001\001\000\006\101\144\102\166\001\001\000\006" +
    "\101\144\102\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\101\144" +
    "\102\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\104\136\105\203\106" +
    "\142\001\001\000\010\104\136\105\176\106\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\104\136\105" +
    "\172\106\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\217\001" +
    "\001\000\004\104\216\001\001\000\004\104\215\001\001" +
    "\000\004\104\214\001\001\000\004\104\213\001\001\000" +
    "\004\104\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\223\001\001\000\002\001\001\000\004\024\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\101\144" +
    "\102\146\103\230\104\136\105\133\106\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\074\233\075\236" +
    "\076\237\100\235\101\144\102\146\103\234\104\136\105" +
    "\133\106\142\001\001\000\024\075\244\076\237\100\235" +
    "\101\144\102\146\103\234\104\136\105\133\106\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\241\001\001\000\002\001" +
    "\001\000\016\101\144\102\146\103\243\104\136\105\133" +
    "\106\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\247\061\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\101" +
    "\144\102\146\103\253\104\136\105\133\106\142\001\001" +
    "\000\002\001\001\000\016\101\144\102\146\103\255\104" +
    "\136\105\133\106\142\001\001\000\002\001\001\000\020" +
    "\062\257\101\144\102\146\103\260\104\136\105\133\106" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\024\102\031\127\042\105\044\271\045\124\046" +
    "\117\047\131\050\116\053\122\055\106\060\113\073\107" +
    "\107\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\101\144\102\146\103\276\104\136\105\133\106\142" +
    "\001\001\000\016\101\144\102\146\103\275\104\136\105" +
    "\133\106\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\300\001\001\000\002\001\001\000\016\101" +
    "\144\102\146\103\324\104\136\105\133\106\142\001\001" +
    "\000\016\101\144\102\146\103\322\104\136\105\133\106" +
    "\142\001\001\000\020\040\317\101\144\102\146\103\316" +
    "\104\136\105\133\106\142\001\001\000\016\101\144\102" +
    "\146\103\314\104\136\105\133\106\142\001\001\000\016" +
    "\101\144\102\146\103\312\104\136\105\133\106\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\070\330\104\136\105\327\106\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\332\001\001" +
    "\000\004\043\333\001\001\000\002\001\001\000\004\055" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\101" +
    "\144\102\146\103\352\104\136\105\133\106\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\370\033\371\001\001\000" +
    "\002\001\001\000\004\033\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\375\001" +
    "\001\000\002\001\001\000\004\024\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\101\144\102\146\103\u0106" +
    "\104\136\105\133\106\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\101\144\102\146" +
    "\103\u0109\104\136\105\133\106\142\001\001\000\002\001" +
    "\001\000\004\055\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\101\144\102\146\103\u010e\104\136\105" +
    "\133\106\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\u0111\001\001\000\002\001\001\000\012\024" +
    "\071\025\u0113\026\073\027\070\001\001\000\002\001\001" +
    "\000\004\055\u0115\001\001\000\002\001\001\000\004\111" +
    "\u0117\001\001\000\002\001\001\000\016\101\144\102\146" +
    "\103\u011a\104\136\105\133\106\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\071" +
    "\025\u011d\026\073\027\070\001\001\000\002\001\001\000" +
    "\004\055\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public TablaSimbolos tabla = new TablaSimbolos();  // Tabla de símbolos
    public AnalizadorSemantico semantico = new AnalizadorSemantico(tabla);  // Integrado directamente

    public void syntax_error(Symbol s){
        this.s = s;
        System.err.println("Error de sintaxis en : " + s.value);
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    // Variables que se usarán en las acciones semánticas
    String tipoActual = "";
    String modificadorActual = "";

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentencia_return ::= PALABRA_RESERVADA_RETURN expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_return",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencia_return ::= PALABRA_RESERVADA_RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_return",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresion_for ::= OPERADOR_DISMINUCION IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expresion_for ::= OPERADOR_INCREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresion_for ::= IDENTIFICADOR OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresion_for ::= IDENTIFICADOR OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresion_for ::= expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresion_for ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_for",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declaracion_for ::= IDENTIFICADOR OPERADOR_ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declaracion_for ::= tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declaracion_for ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declaracion_for ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_for ::= PALABRA_RESERVADA_FOR OPERADOR_PARENTESIS_ABRIR tipo IDENTIFICADOR OPERADOR_RANGO expresion OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_for ::= PALABRA_RESERVADA_FOR OPERADOR_PARENTESIS_ABRIR declaracion_for PUNTO_Y_COMA expresion PUNTO_Y_COMA expresion_for OPERADOR_PARENTESIS_CERRAR sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_while ::= PALABRA_RESERVADA_WHILE OPERADOR_PARENTESIS_ABRIR expresion OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_while",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_else ::= PALABRA_RESERVADA_ELSE bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_else",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_else ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_else",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion_if ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_if",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_if ::= PALABRA_RESERVADA_IF OPERADOR_PARENTESIS_ABRIR expresion_if OPERADOR_PARENTESIS_CERRAR bloque sentencia_else 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_if",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION expresion_aritmetica PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_DISMINUCION PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_INCREMENTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_DIVISION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_MULTIPLICACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_SUSTRACCION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION_ADICION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_asignacion ::= IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        Simbolo sim = tabla.buscar(id.toString());
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (sim == null) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' no ha sido declarada");
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' no ha sido declarada");
        } else {
            // Verificar si es constante
            if (sim.tipo.equals("constante")) {
                System.err.println("Error semántico línea " + eleft + 
                    ": No se puede reasignar la constante '" + id + "'");
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ha sido declarada como constante");
            }
                        if(!sim.tipoDato.equals(e.getTipo())){
                            semantico.addError("Error semántico línea " + eleft + 
                            ": Constante '" + id + "' espera un dato del tipo: "+sim.tipoDato );
           
                        }

            // TODO: Verificar compatibilidad de tipos
            // if (!sonTiposCompatibles(sim.tipoDato, e.tipo)) { ... }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_operador ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // simple_operador ::= OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // simple_operador ::= OPERADOR_DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // simple_operador ::= OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // simple_operador ::= OPERADOR_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // simple_operador ::= OPERADOR_ADICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simple_operador",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion_numerica ::= LITERAL_NUM_FLOTANTE 
            {
              Expresion RESULT =null;
		int ent2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto decimal el tipo es:"+ ent2.toString());
        RESULT = new Expresion("float",ent2.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_numerica",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion_numerica ::= LITERAL_NUM_ENTERO 
            {
              Expresion RESULT =null;
		int ent1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto entero el tipo es:"+ ent1.toString());
        RESULT = new Expresion("int",ent1.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_numerica",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion_numerica ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        Simbolo sim = tabla.buscar(id.toString());
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (sim == null) {
            System.err.println("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                semantico.addError("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                RESULT = new Expresion("null","null");

        }else{
                RESULT = new Expresion(sim.tipoDato,sim.valor.toString());
        }
        
        // Retornar el tipo para verificaciones posteriores
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_numerica",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion_relacional ::= expresion_numerica OPERADOR_DISTINTO expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"!=" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion_relacional ::= expresion_numerica OPERADOR_IGUAL expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"==" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion_relacional ::= expresion_numerica OPERADOR_MENOR_IGUAL_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"<=" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion_relacional ::= expresion_numerica OPERADOR_MAYOR_IGUAL_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +">=" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion_relacional ::= expresion_numerica OPERADOR_MENOR_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"<" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion_relacional ::= expresion_numerica OPERADOR_MAYOR_QUE expresion_numerica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +">" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion_logica ::= expresion_relacional 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion_logica ::= OPERADOR_PARENTESIS_ABRIR expresion_logica OPERADOR_PARENTESIS_CERRAR 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new Expresion( "boolean","("+exp.getValor()+")");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion_logica ::= PALABRA_RESERVADA_FALSE 
            {
              Expresion RESULT =null;
		
        RESULT = new Expresion( "boolean", "false");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion_logica ::= PALABRA_RESERVADA_TRUE 
            {
              Expresion RESULT =null;
		
        RESULT = new Expresion( "boolean", "true");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion_logica ::= OPERADOR_NOT IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", "!" +id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion_logica ::= OPERADOR_NOT expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", "!" +exp.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion_logica ::= expresion_logica OPERADOR_OR expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"||" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion_logica ::= expresion_logica OPERADOR_AND expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Expresion( "boolean", exp.getValor() +"&&" +exp2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion_primaria ::= PALABRA_RESERVADA_NULL 
            {
              Expresion RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto null el tipo es:"+ ent.toString());
        RESULT = new Expresion("null","null");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_primaria ::= LITERAL_STRING 
            {
              Expresion RESULT =null;
		int ent3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto string el tipo es:"+ ent3.toString());
        RESULT = new Expresion("String",ent3.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_primaria ::= LITERAL_NUM_FLOTANTE 
            {
              Expresion RESULT =null;
		int ent2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto decimal el tipo es:"+ ent2.toString());
        RESULT = new Expresion("float",ent2.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion_primaria ::= LITERAL_NUM_ENTERO 
            {
              Expresion RESULT =null;
		int ent1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ent1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ent1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        System.out.println("JAA esto entero el tipo es:"+ ent1.toString());
        RESULT = new Expresion("int",ent1.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion_primaria ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        Simbolo sim = tabla.buscar(id.toString());
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (sim == null) {
            System.err.println("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                semantico.addError("Error semántico línea " + idleft + 
                ": Variable '" + id + "' no ha sido declarada");
                RESULT = new Expresion("","");

        }else{
                RESULT = new Expresion(sim.tipoDato,sim.valor.toString());
        }
        
        // Retornar el tipo para verificaciones posteriores
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_primaria",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_matematica ::= expresion_primaria 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = exp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_matematica ::= OPERADOR_PARENTESIS_ABRIR expresion_matematica OPERADOR_PARENTESIS_CERRAR 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new Expresion( exp_mat.getTipo(), "("+exp_mat.getValor()+")");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_matematica ::= expresion_matematica OPERADOR_DIVISION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if(!exp_mat.getTipo().equals(exp_mat2.getTipo())){
                semantico.addError("Error semántico línea " + exp_matleft + 
                ": Tipos no compatibles para realizar operación");         
        }
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor() +"/" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_matematica ::= expresion_matematica OPERADOR_MULTIPLICACION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if(!exp_mat.getTipo().equals(exp_mat2.getTipo())){
                semantico.addError("Error semántico línea " + exp_matleft + 
                ": Tipos no compatibles para realizar operación");         
        }
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor() +"*" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_matematica ::= expresion_matematica OPERADOR_SUSTRACCION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if(!exp_mat.getTipo().equals(exp_mat2.getTipo())){
                semantico.addError("Error semántico línea " + exp_matleft + 
                ": Tipos no compatibles para realizar operación");         
        }
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor()+ "-" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_matematica ::= expresion_matematica OPERADOR_ADICION expresion_matematica 
            {
              Expresion RESULT =null;
		int exp_matleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp_matright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Expresion exp_mat = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_mat2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_mat2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp_mat2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if(!exp_mat.getTipo().equals(exp_mat2.getTipo())){
                semantico.addError("Error semántico línea " + exp_matleft + 
                ": Tipos no compatibles para realizar operación");         
        }
        RESULT = new Expresion( exp_mat.getTipo(), exp_mat.getValor() +"+" +exp_mat2.getValor());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_matematica",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion_matematica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = exp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion_logica 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = exp;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracion_variable_local ::= PALABRA_RESERVADA_CONST tipo_compuesto IDENTIFICADOR OPERADOR_ASIGNACION PALABRA_RESERVADA_NEW tipo_compuesto OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Expresion tip = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                System.out.println("Nos vamos todos a la recon");
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                

        } else {
            tabla.agregar(id.toString(), "constante", tipoActual, idleft,tip.getValor());
            System.out.println("Declarando constante: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracion_variable_local ::= tipo_compuesto IDENTIFICADOR OPERADOR_ASIGNACION PALABRA_RESERVADA_NEW tipo_compuesto OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Expresion tip = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                System.out.println("Nos vamos todos a la recon");
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                

        } else {
            tabla.agregar(id.toString(), "Variable", tip.getTipo(), idleft,tip.getValor());
            System.out.println("Declarando variable: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracion_variable_local ::= PALABRA_RESERVADA_CONST tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;


        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "constante", tipoActual, eleft,e.getValor());
            System.out.println("Declarando variable local con asignación: " + id.toString());
            if(semantico.sonTiposCompatibles(tipoActual,e.getTipo())){
                System.out.println("Declarando variable local con asignación: " + id.toString());
            }else{
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' espera un dato del tipo: "+tipoActual );
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion_variable_local ::= PALABRA_RESERVADA_CONST tipo IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
                

        } else {
            tabla.agregar(id.toString(), "constante", tipoActual, idleft,null);
            System.out.println("Declarando constante: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracion_variable_local ::= tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;


        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "variable", tipoActual, eleft,e.getValor());
            System.out.println("Declarando variable local con asignación: " + id.toString());
            if(semantico.sonTiposCompatibles(tipoActual,e.getTipo())){
                System.out.println("Declarando variable local con asignación: " + id.toString());
            }else{
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' espera un dato del tipo: "+tipoActual );
            }
            // TODO: Verificar que el tipo de 'e' sea compatible con tipoActual
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion_variable_local ::= tipo IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "variable", tipoActual, idleft,null);
            System.out.println("Declarando variable local: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_variable_local",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // catch ::= PALABRA_RESERVADA_CATCH OPERADOR_PARENTESIS_ABRIR OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("catch",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_catch ::= lista_catch catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_catch",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_catch ::= catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_catch",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_try_catch ::= PALABRA_RESERVADA_TRY bloque lista_catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_try_catch",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_compuesto ::= PALABRA_RESERVADA_ARRAYLIST OPERADOR_MENOR_QUE tipo OPERADOR_MAYOR_QUE 
            {
              Expresion RESULT =null;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object elementType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        tipoActual = "ArrayList<" + elementType + ">"; 
        RESULT = new Expresion("Compuesto(ArrayList)","ArrayList<" + elementType + ">");
        System.out.println("Tipo compuesto: " + tipoActual);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_compuesto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_compuesto ::= PALABRA_RESERVADA_LIST OPERADOR_MENOR_QUE tipo OPERADOR_MAYOR_QUE 
            {
              Expresion RESULT =null;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object elementType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        tipoActual = "List<" + elementType + ">"; 
        RESULT = new Expresion("Compuesto (List)","List<" + elementType + ">");
        System.out.println("Tipo compuesto: " + tipoActual);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_compuesto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_compuesto ::= PALABRA_RESERVADA_MAP OPERADOR_MENOR_QUE tipo COMA tipo OPERADOR_MAYOR_QUE 
            {
              Expresion RESULT =null;
		int keyTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int keyTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object keyType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valueTypeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valueTyperight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valueType = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        tipoActual = "Map<" + keyType + "," + valueType + ">"; 
        RESULT = new Expresion("Compuesto(Map)","Map<" + keyType + "," + valueType + ">");
        System.out.println("Tipo compuesto: " + tipoActual);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_compuesto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= sentencia_when 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentencia_try_catch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentencia_llamada_metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentencia_return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= declaracion_variable_local 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_sentencias",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_sentencias",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= OPERADOR_LLAVE_ABRIR lista_sentencias OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= OPERADOR_LLAVE_ABRIR OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= PALABRA_RESERVADA_BOOLEAN 
            {
              Object RESULT =null;
		 
        tipoActual = "boolean"; 
        RESULT = "boolean";
        System.out.println("Tipo actual: boolean");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= PALABRA_RESERVADA_LONG 
            {
              Object RESULT =null;
		 
        tipoActual = "long"; 
        RESULT = "long";
        System.out.println("Tipo actual: long");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= PALABRA_RESERVADA_CHAR 
            {
              Object RESULT =null;
		 
        tipoActual = "char"; 
        RESULT = "char";
        System.out.println("Tipo actual: char");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo ::= PALABRA_RESERVADA_FLOAT 
            {
              Object RESULT =null;
		 
        tipoActual = "float"; 
        RESULT = "float";
        System.out.println("Tipo actual: float");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo ::= PALABRA_RESERVADA_DOUBLE 
            {
              Object RESULT =null;
		 
        tipoActual = "double"; 
        RESULT = "double";
        System.out.println("Tipo actual: double");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= PALABRA_RESERVADA_STRING 
            {
              Object RESULT =null;
		 
        tipoActual = "String"; 
        RESULT = "String";
        System.out.println("Tipo actual: String");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= PALABRA_RESERVADA_INT 
            {
              Object RESULT =null;
		 
        tipoActual = "int"; 
        RESULT = "int";
        System.out.println("Tipo actual: int");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_constructor ::= modificadores_clase IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_constructor",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "parametro", tipoActual, 0,null);
        System.out.println("Declarando parámetro: " + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_metodo ::= modificadores_clase PALABRA_RESERVADA_VOID IDENTIFICADOR NT$2 OPERADOR_PARENTESIS_ABRIR parametros OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.salirAmbito();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "metodo", "void", 0,null);
        System.out.println("Declarando método void: " + id.toString());
        tabla.entrarAmbito("metodo_" + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_metodo ::= modificadores_clase tipo IDENTIFICADOR NT$1 OPERADOR_PARENTESIS_ABRIR parametros OPERADOR_PARENTESIS_CERRAR bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.salirAmbito();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        tabla.entrarAmbito("metodo_" + id.toString());

        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": metodo '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": metodo '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "metodo", tipoActual, 0,null);
             System.out.println("Declarando metodo: " + id.toString());
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_atributo ::= modificadores_clase tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;


        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + eleft + 
                ": Variable '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + eleft + 
                ": Constante '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "variable", tipoActual, eleft,e.getValor());
            System.out.println("Declarando variable local con asignación: " + id.toString());
            if(semantico.sonTiposCompatibles(tipoActual,e.getTipo())){
                System.out.println("Declarando variable local con asignación: " + id.toString());
            }else{
                semantico.addError("Error semántico línea " + eleft + 
                ": Variable '" + id + "' espera un dato del tipo: "+tipoActual );
            }
            // TODO: Verificar que el tipo de 'e' sea compatible con tipoActual
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_atributo",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_atributo ::= modificadores_clase tipo IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.agregar(id.toString(), "atributo", tipoActual, 0,null);
        System.out.println("Declarando atributo: " + id.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_atributo",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_rango ::= expresion OPERADOR_RANGO expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_rango",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion_when ::= expresion_rango 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_when",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rama_when ::= condicion_when OPERADOR_FLECHA bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rama_when",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_ramas_when ::= lista_ramas_when rama_when 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_ramas_when",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_ramas_when ::= rama_when 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_ramas_when",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_when ::= PALABRA_RESERVADA_WHEN OPERADOR_PARENTESIS_ABRIR expresion OPERADOR_PARENTESIS_CERRAR OPERADOR_LLAVE_ABRIR lista_ramas_when OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_when",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // miembro ::= declaracion_constructor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("miembro",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // miembro ::= declaracion_metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("miembro",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // miembro ::= declaracion_atributo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("miembro",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_miembros ::= lista_miembros miembro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_miembros",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_miembros ::= miembro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_miembros",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_clase ::= lista_miembros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_clase ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_interfaces ::= lista_interfaces COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_interfaces",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_interfaces ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_interfaces",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // implementacion ::= PALABRA_RESERVADA_IMPLEMENTS lista_interfaces 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("implementacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // implementacion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("implementacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // herencia ::= PALABRA_RESERVADA_EXTENDS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("herencia",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // herencia ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("herencia",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modificador ::= PALABRA_RESERVADA_OVERRIDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modificador ::= PALABRA_RESERVADA_ABSTRACT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // modificador ::= PALABRA_RESERVADA_FINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // modificador ::= PALABRA_RESERVADA_STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modificador ::= PALABRA_RESERVADA_PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // modificador ::= PALABRA_RESERVADA_PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // modificador ::= PALABRA_RESERVADA_PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificador",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_modificadores ::= lista_modificadores modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_modificadores",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_modificadores ::= modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_modificadores",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // modificadores_clase ::= lista_modificadores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificadores_clase",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // modificadores_clase ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("modificadores_clase",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_clase ::= modificadores_clase PALABRA_RESERVADA_CLASS IDENTIFICADOR NT$0 herencia implementacion OPERADOR_LLAVE_ABRIR cuerpo_clase OPERADOR_LLAVE_CERRAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        tabla.salirAmbito();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_clase",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        TablaSimbolos tabla = ((Sintax)CUP$Sintax$parser).tabla;
        AnalizadorSemantico semantico = ((Sintax)CUP$Sintax$parser).semantico;
        tabla.entrarAmbito("clase_" + id.toString());

        // Verificar si ya existe
        if (tabla.existeEnAmbitoSuperior2(id.toString())) {
            System.err.println("Error semántico línea " + idleft + 
                ": Clase '" + id + "' ya fue declarada en este ámbito");
                semantico.addError("Error semántico línea " + idleft + 
                ": Clase '" + id + "' ya fue declarada en este ámbito");
        } else {
            tabla.agregar(id.toString(), "clase", "N/A", idleft, null);
              System.out.println("Declarando clase: " + id.toString());
            // TODO: Verificar que el tipo de 'e' sea compatible con tipoActual
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ruta_import ::= ruta_import PUNTO OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ruta_import",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ruta_import ::= ruta_import PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ruta_import",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ruta_import ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ruta_import",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_import ::= PALABRA_RESERVADA_IMPORT ruta_import PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
        System.out.println("Importando: Ruta ");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_import",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= declaracion_clase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= declaracion_import 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_declaraciones ::= lista_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_declaraciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

